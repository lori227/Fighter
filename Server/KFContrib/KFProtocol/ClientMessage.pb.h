// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMessage.proto

#ifndef PROTOBUF_INCLUDED_ClientMessage_2eproto
#define PROTOBUF_INCLUDED_ClientMessage_2eproto

#ifdef _MSC_VER
	#pragma warning(push)
	#pragma warning(disable : 4946)
#endif

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DefineMessage.pb.h"
#include "FrameDefineMessage.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ClientMessage_2eproto LIBPROTOC_EXPORT

namespace protobuf_ClientMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[23];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_ClientMessage_2eproto
namespace KFMsg {
class MsgAddMatchPlayerAck;
class MsgAddMatchPlayerAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgAddMatchPlayerAckDefaultTypeInternal _MsgAddMatchPlayerAck_default_instance_;
class MsgCancelMatchReq;
class MsgCancelMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgCancelMatchReqDefaultTypeInternal _MsgCancelMatchReq_default_instance_;
class MsgChangeMatchMasterAck;
class MsgChangeMatchMasterAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgChangeMatchMasterAckDefaultTypeInternal _MsgChangeMatchMasterAck_default_instance_;
class MsgCreateMatchReq;
class MsgCreateMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgCreateMatchReqDefaultTypeInternal _MsgCreateMatchReq_default_instance_;
class MsgEffectUseReq;
class MsgEffectUseReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgEffectUseReqDefaultTypeInternal _MsgEffectUseReq_default_instance_;
class MsgFightMatchReq;
class MsgFightMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgFightMatchReqDefaultTypeInternal _MsgFightMatchReq_default_instance_;
class MsgFighterHeroReq;
class MsgFighterHeroReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgFighterHeroReqDefaultTypeInternal _MsgFighterHeroReq_default_instance_;
class MsgFinishRoomReq;
class MsgFinishRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgFinishRoomReqDefaultTypeInternal _MsgFinishRoomReq_default_instance_;
class MsgFootUseReq;
class MsgFootUseReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgFootUseReqDefaultTypeInternal _MsgFootUseReq_default_instance_;
class MsgInformBattleAck;
class MsgInformBattleAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgInformBattleAckDefaultTypeInternal _MsgInformBattleAck_default_instance_;
class MsgInformBattleReq;
class MsgInformBattleReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgInformBattleReqDefaultTypeInternal _MsgInformBattleReq_default_instance_;
class MsgInviteMatchAck;
class MsgInviteMatchAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgInviteMatchAckDefaultTypeInternal _MsgInviteMatchAck_default_instance_;
class MsgInviteMatchReq;
class MsgInviteMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgInviteMatchReqDefaultTypeInternal _MsgInviteMatchReq_default_instance_;
class MsgJoinMatchAck;
class MsgJoinMatchAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgJoinMatchAckDefaultTypeInternal _MsgJoinMatchAck_default_instance_;
class MsgJoinMatchReq;
class MsgJoinMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgJoinMatchReqDefaultTypeInternal _MsgJoinMatchReq_default_instance_;
class MsgKickMatchReq;
class MsgKickMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgKickMatchReqDefaultTypeInternal _MsgKickMatchReq_default_instance_;
class MsgLeaveMatchAck;
class MsgLeaveMatchAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgLeaveMatchAckDefaultTypeInternal _MsgLeaveMatchAck_default_instance_;
class MsgPrePareMatchAck;
class MsgPrePareMatchAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgPrePareMatchAckDefaultTypeInternal _MsgPrePareMatchAck_default_instance_;
class MsgPrePareMatchReq;
class MsgPrePareMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgPrePareMatchReqDefaultTypeInternal _MsgPrePareMatchReq_default_instance_;
class MsgQueryMatchListAck;
class MsgQueryMatchListAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgQueryMatchListAckDefaultTypeInternal _MsgQueryMatchListAck_default_instance_;
class MsgQueryMatchListReq;
class MsgQueryMatchListReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgQueryMatchListReqDefaultTypeInternal _MsgQueryMatchListReq_default_instance_;
class MsgStartMatchReq;
class MsgStartMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgStartMatchReqDefaultTypeInternal _MsgStartMatchReq_default_instance_;
class MsgTellMatchCount;
class MsgTellMatchCountDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgTellMatchCountDefaultTypeInternal _MsgTellMatchCount_default_instance_;
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::KFMsg::MsgAddMatchPlayerAck* Arena::CreateMaybeMessage<::KFMsg::MsgAddMatchPlayerAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgCancelMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgCancelMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgChangeMatchMasterAck* Arena::CreateMaybeMessage<::KFMsg::MsgChangeMatchMasterAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgCreateMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgCreateMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgEffectUseReq* Arena::CreateMaybeMessage<::KFMsg::MsgEffectUseReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgFightMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgFightMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgFighterHeroReq* Arena::CreateMaybeMessage<::KFMsg::MsgFighterHeroReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgFinishRoomReq* Arena::CreateMaybeMessage<::KFMsg::MsgFinishRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgFootUseReq* Arena::CreateMaybeMessage<::KFMsg::MsgFootUseReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgInformBattleAck* Arena::CreateMaybeMessage<::KFMsg::MsgInformBattleAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgInformBattleReq* Arena::CreateMaybeMessage<::KFMsg::MsgInformBattleReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgInviteMatchAck* Arena::CreateMaybeMessage<::KFMsg::MsgInviteMatchAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgInviteMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgInviteMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgJoinMatchAck* Arena::CreateMaybeMessage<::KFMsg::MsgJoinMatchAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgJoinMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgJoinMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgKickMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgKickMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgLeaveMatchAck* Arena::CreateMaybeMessage<::KFMsg::MsgLeaveMatchAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgPrePareMatchAck* Arena::CreateMaybeMessage<::KFMsg::MsgPrePareMatchAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgPrePareMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgPrePareMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgQueryMatchListAck* Arena::CreateMaybeMessage<::KFMsg::MsgQueryMatchListAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgQueryMatchListReq* Arena::CreateMaybeMessage<::KFMsg::MsgQueryMatchListReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgStartMatchReq* Arena::CreateMaybeMessage<::KFMsg::MsgStartMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::MsgTellMatchCount* Arena::CreateMaybeMessage<::KFMsg::MsgTellMatchCount>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KFMsg {

enum ClientProtocol {
  MSG_CLIENT_BEGIN = 0,
  MSG_FIGHTER_HERO_REQ = 3001,
  MSG_EFFECT_USE_REQ = 3002,
  MSG_FOOT_USE_REQ = 3003,
  MSG_START_MATCH_REQ = 3101,
  MSG_CANCEL_MATCH_REQ = 3102,
  MSG_INFORM_BATTLE_REQ = 3103,
  MSG_INFORM_BATTLE_ACK = 3104,
  MSG_FINISH_ROOM_REQ = 3105,
  MSG_TELL_MATCH_COUNT = 3106,
  MSG_CREATE_MATCH_REQ = 3107,
  MSG_CREATE_MATCH_ACK = 3108,
  MSG_JOIN_MATCH_REQ = 3109,
  MSG_JOIN_MATCH_ACK = 3110,
  MSG_ADD_MATCH_PLAYER_ACK = 3111,
  MSG_QUERY_MATCH_LIST_REQ = 3113,
  MSG_QUERY_MATCH_LIST_ACK = 3114,
  MSG_KICK_MATCH_REQ = 3115,
  MSG_LEAVE_MATCH_ACK = 3116,
  MSG_CHANGE_MATCH_MASTER_ACK = 3117,
  MSG_FIGHT_MATCH_REQ = 3118,
  MSG_PREPARE_MATCH_REQ = 3119,
  MSG_PREPATE_MATCH_ACK = 3120,
  MSG_INVITE_MATCH_REQ = 3121,
  MSG_INVITE_MATCH_ACK = 3122,
  ClientProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ClientProtocol_IsValid(int value);
const ClientProtocol ClientProtocol_MIN = MSG_CLIENT_BEGIN;
const ClientProtocol ClientProtocol_MAX = MSG_INVITE_MATCH_ACK;
const int ClientProtocol_ARRAYSIZE = ClientProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ClientProtocol_descriptor();
inline const ::std::string& ClientProtocol_Name(ClientProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientProtocol_descriptor(), value);
}
inline bool ClientProtocol_Parse(
    const ::std::string& name, ClientProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientProtocol>(
    ClientProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT MsgFighterHeroReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgFighterHeroReq) */ {
 public:
  MsgFighterHeroReq();
  virtual ~MsgFighterHeroReq();

  MsgFighterHeroReq(const MsgFighterHeroReq& from);

  inline MsgFighterHeroReq& operator=(const MsgFighterHeroReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgFighterHeroReq(MsgFighterHeroReq&& from) noexcept
    : MsgFighterHeroReq() {
    *this = ::std::move(from);
  }

  inline MsgFighterHeroReq& operator=(MsgFighterHeroReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFighterHeroReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgFighterHeroReq* internal_default_instance() {
    return reinterpret_cast<const MsgFighterHeroReq*>(
               &_MsgFighterHeroReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MsgFighterHeroReq* other);
  friend void swap(MsgFighterHeroReq& a, MsgFighterHeroReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgFighterHeroReq* New() const final {
    return CreateMaybeMessage<MsgFighterHeroReq>(NULL);
  }

  MsgFighterHeroReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgFighterHeroReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgFighterHeroReq& from);
  void MergeFrom(const MsgFighterHeroReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgFighterHeroReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 heroid = 1;
  void clear_heroid();
  static const int kHeroidFieldNumber = 1;
  ::google::protobuf::uint32 heroid() const;
  void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgFighterHeroReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 heroid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgEffectUseReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgEffectUseReq) */ {
 public:
  MsgEffectUseReq();
  virtual ~MsgEffectUseReq();

  MsgEffectUseReq(const MsgEffectUseReq& from);

  inline MsgEffectUseReq& operator=(const MsgEffectUseReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgEffectUseReq(MsgEffectUseReq&& from) noexcept
    : MsgEffectUseReq() {
    *this = ::std::move(from);
  }

  inline MsgEffectUseReq& operator=(MsgEffectUseReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgEffectUseReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgEffectUseReq* internal_default_instance() {
    return reinterpret_cast<const MsgEffectUseReq*>(
               &_MsgEffectUseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MsgEffectUseReq* other);
  friend void swap(MsgEffectUseReq& a, MsgEffectUseReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgEffectUseReq* New() const final {
    return CreateMaybeMessage<MsgEffectUseReq>(NULL);
  }

  MsgEffectUseReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgEffectUseReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgEffectUseReq& from);
  void MergeFrom(const MsgEffectUseReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgEffectUseReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 effectid = 1;
  void clear_effectid();
  static const int kEffectidFieldNumber = 1;
  ::google::protobuf::uint32 effectid() const;
  void set_effectid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgEffectUseReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 effectid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgFootUseReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgFootUseReq) */ {
 public:
  MsgFootUseReq();
  virtual ~MsgFootUseReq();

  MsgFootUseReq(const MsgFootUseReq& from);

  inline MsgFootUseReq& operator=(const MsgFootUseReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgFootUseReq(MsgFootUseReq&& from) noexcept
    : MsgFootUseReq() {
    *this = ::std::move(from);
  }

  inline MsgFootUseReq& operator=(MsgFootUseReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFootUseReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgFootUseReq* internal_default_instance() {
    return reinterpret_cast<const MsgFootUseReq*>(
               &_MsgFootUseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MsgFootUseReq* other);
  friend void swap(MsgFootUseReq& a, MsgFootUseReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgFootUseReq* New() const final {
    return CreateMaybeMessage<MsgFootUseReq>(NULL);
  }

  MsgFootUseReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgFootUseReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgFootUseReq& from);
  void MergeFrom(const MsgFootUseReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgFootUseReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 footid = 1;
  void clear_footid();
  static const int kFootidFieldNumber = 1;
  ::google::protobuf::uint32 footid() const;
  void set_footid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgFootUseReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 footid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgStartMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgStartMatchReq) */ {
 public:
  MsgStartMatchReq();
  virtual ~MsgStartMatchReq();

  MsgStartMatchReq(const MsgStartMatchReq& from);

  inline MsgStartMatchReq& operator=(const MsgStartMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgStartMatchReq(MsgStartMatchReq&& from) noexcept
    : MsgStartMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgStartMatchReq& operator=(MsgStartMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgStartMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgStartMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgStartMatchReq*>(
               &_MsgStartMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MsgStartMatchReq* other);
  friend void swap(MsgStartMatchReq& a, MsgStartMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgStartMatchReq* New() const final {
    return CreateMaybeMessage<MsgStartMatchReq>(NULL);
  }

  MsgStartMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgStartMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgStartMatchReq& from);
  void MergeFrom(const MsgStartMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgStartMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint64 serverid = 3;
  void clear_serverid();
  static const int kServeridFieldNumber = 3;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgStartMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgCancelMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgCancelMatchReq) */ {
 public:
  MsgCancelMatchReq();
  virtual ~MsgCancelMatchReq();

  MsgCancelMatchReq(const MsgCancelMatchReq& from);

  inline MsgCancelMatchReq& operator=(const MsgCancelMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgCancelMatchReq(MsgCancelMatchReq&& from) noexcept
    : MsgCancelMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgCancelMatchReq& operator=(MsgCancelMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCancelMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgCancelMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgCancelMatchReq*>(
               &_MsgCancelMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MsgCancelMatchReq* other);
  friend void swap(MsgCancelMatchReq& a, MsgCancelMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgCancelMatchReq* New() const final {
    return CreateMaybeMessage<MsgCancelMatchReq>(NULL);
  }

  MsgCancelMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgCancelMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgCancelMatchReq& from);
  void MergeFrom(const MsgCancelMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCancelMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgCancelMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgInformBattleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgInformBattleReq) */ {
 public:
  MsgInformBattleReq();
  virtual ~MsgInformBattleReq();

  MsgInformBattleReq(const MsgInformBattleReq& from);

  inline MsgInformBattleReq& operator=(const MsgInformBattleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgInformBattleReq(MsgInformBattleReq&& from) noexcept
    : MsgInformBattleReq() {
    *this = ::std::move(from);
  }

  inline MsgInformBattleReq& operator=(MsgInformBattleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgInformBattleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgInformBattleReq* internal_default_instance() {
    return reinterpret_cast<const MsgInformBattleReq*>(
               &_MsgInformBattleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MsgInformBattleReq* other);
  friend void swap(MsgInformBattleReq& a, MsgInformBattleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgInformBattleReq* New() const final {
    return CreateMaybeMessage<MsgInformBattleReq>(NULL);
  }

  MsgInformBattleReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgInformBattleReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgInformBattleReq& from);
  void MergeFrom(const MsgInformBattleReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgInformBattleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 battleid = 2;
  void clear_battleid();
  static const int kBattleidFieldNumber = 2;
  ::google::protobuf::uint64 battleid() const;
  void set_battleid(::google::protobuf::uint64 value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgInformBattleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 battleid_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgInformBattleAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgInformBattleAck) */ {
 public:
  MsgInformBattleAck();
  virtual ~MsgInformBattleAck();

  MsgInformBattleAck(const MsgInformBattleAck& from);

  inline MsgInformBattleAck& operator=(const MsgInformBattleAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgInformBattleAck(MsgInformBattleAck&& from) noexcept
    : MsgInformBattleAck() {
    *this = ::std::move(from);
  }

  inline MsgInformBattleAck& operator=(MsgInformBattleAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgInformBattleAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgInformBattleAck* internal_default_instance() {
    return reinterpret_cast<const MsgInformBattleAck*>(
               &_MsgInformBattleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MsgInformBattleAck* other);
  friend void swap(MsgInformBattleAck& a, MsgInformBattleAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgInformBattleAck* New() const final {
    return CreateMaybeMessage<MsgInformBattleAck>(NULL);
  }

  MsgInformBattleAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgInformBattleAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgInformBattleAck& from);
  void MergeFrom(const MsgInformBattleAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgInformBattleAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KFMsg.MsgInformBattleAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgFinishRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgFinishRoomReq) */ {
 public:
  MsgFinishRoomReq();
  virtual ~MsgFinishRoomReq();

  MsgFinishRoomReq(const MsgFinishRoomReq& from);

  inline MsgFinishRoomReq& operator=(const MsgFinishRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgFinishRoomReq(MsgFinishRoomReq&& from) noexcept
    : MsgFinishRoomReq() {
    *this = ::std::move(from);
  }

  inline MsgFinishRoomReq& operator=(MsgFinishRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFinishRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgFinishRoomReq* internal_default_instance() {
    return reinterpret_cast<const MsgFinishRoomReq*>(
               &_MsgFinishRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MsgFinishRoomReq* other);
  friend void swap(MsgFinishRoomReq& a, MsgFinishRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgFinishRoomReq* New() const final {
    return CreateMaybeMessage<MsgFinishRoomReq>(NULL);
  }

  MsgFinishRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgFinishRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgFinishRoomReq& from);
  void MergeFrom(const MsgFinishRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgFinishRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgFinishRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgTellMatchCount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgTellMatchCount) */ {
 public:
  MsgTellMatchCount();
  virtual ~MsgTellMatchCount();

  MsgTellMatchCount(const MsgTellMatchCount& from);

  inline MsgTellMatchCount& operator=(const MsgTellMatchCount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgTellMatchCount(MsgTellMatchCount&& from) noexcept
    : MsgTellMatchCount() {
    *this = ::std::move(from);
  }

  inline MsgTellMatchCount& operator=(MsgTellMatchCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTellMatchCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgTellMatchCount* internal_default_instance() {
    return reinterpret_cast<const MsgTellMatchCount*>(
               &_MsgTellMatchCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MsgTellMatchCount* other);
  friend void swap(MsgTellMatchCount& a, MsgTellMatchCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgTellMatchCount* New() const final {
    return CreateMaybeMessage<MsgTellMatchCount>(NULL);
  }

  MsgTellMatchCount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgTellMatchCount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgTellMatchCount& from);
  void MergeFrom(const MsgTellMatchCount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTellMatchCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgTellMatchCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgCreateMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgCreateMatchReq) */ {
 public:
  MsgCreateMatchReq();
  virtual ~MsgCreateMatchReq();

  MsgCreateMatchReq(const MsgCreateMatchReq& from);

  inline MsgCreateMatchReq& operator=(const MsgCreateMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgCreateMatchReq(MsgCreateMatchReq&& from) noexcept
    : MsgCreateMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgCreateMatchReq& operator=(MsgCreateMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCreateMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgCreateMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgCreateMatchReq*>(
               &_MsgCreateMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MsgCreateMatchReq* other);
  friend void swap(MsgCreateMatchReq& a, MsgCreateMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgCreateMatchReq* New() const final {
    return CreateMaybeMessage<MsgCreateMatchReq>(NULL);
  }

  MsgCreateMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgCreateMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgCreateMatchReq& from);
  void MergeFrom(const MsgCreateMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // bytes title = 4;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const void* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // bytes password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint64 serverid = 3;
  void clear_serverid();
  static const int kServeridFieldNumber = 3;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // bool addrobot = 6;
  void clear_addrobot();
  static const int kAddrobotFieldNumber = 6;
  bool addrobot() const;
  void set_addrobot(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgCreateMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 matchid_;
  bool addrobot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgJoinMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgJoinMatchReq) */ {
 public:
  MsgJoinMatchReq();
  virtual ~MsgJoinMatchReq();

  MsgJoinMatchReq(const MsgJoinMatchReq& from);

  inline MsgJoinMatchReq& operator=(const MsgJoinMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgJoinMatchReq(MsgJoinMatchReq&& from) noexcept
    : MsgJoinMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgJoinMatchReq& operator=(MsgJoinMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgJoinMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgJoinMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgJoinMatchReq*>(
               &_MsgJoinMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(MsgJoinMatchReq* other);
  friend void swap(MsgJoinMatchReq& a, MsgJoinMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgJoinMatchReq* New() const final {
    return CreateMaybeMessage<MsgJoinMatchReq>(NULL);
  }

  MsgJoinMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgJoinMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgJoinMatchReq& from);
  void MergeFrom(const MsgJoinMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgJoinMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // bytes password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint32 matchid = 4;
  void clear_matchid();
  static const int kMatchidFieldNumber = 4;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgJoinMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgJoinMatchAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgJoinMatchAck) */ {
 public:
  MsgJoinMatchAck();
  virtual ~MsgJoinMatchAck();

  MsgJoinMatchAck(const MsgJoinMatchAck& from);

  inline MsgJoinMatchAck& operator=(const MsgJoinMatchAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgJoinMatchAck(MsgJoinMatchAck&& from) noexcept
    : MsgJoinMatchAck() {
    *this = ::std::move(from);
  }

  inline MsgJoinMatchAck& operator=(MsgJoinMatchAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgJoinMatchAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgJoinMatchAck* internal_default_instance() {
    return reinterpret_cast<const MsgJoinMatchAck*>(
               &_MsgJoinMatchAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(MsgJoinMatchAck* other);
  friend void swap(MsgJoinMatchAck& a, MsgJoinMatchAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgJoinMatchAck* New() const final {
    return CreateMaybeMessage<MsgJoinMatchAck>(NULL);
  }

  MsgJoinMatchAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgJoinMatchAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgJoinMatchAck& from);
  void MergeFrom(const MsgJoinMatchAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgJoinMatchAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBMatchRoom pbroom = 1;
  bool has_pbroom() const;
  void clear_pbroom();
  static const int kPbroomFieldNumber = 1;
  private:
  const ::KFMsg::PBMatchRoom& _internal_pbroom() const;
  public:
  const ::KFMsg::PBMatchRoom& pbroom() const;
  ::KFMsg::PBMatchRoom* release_pbroom();
  ::KFMsg::PBMatchRoom* mutable_pbroom();
  void set_allocated_pbroom(::KFMsg::PBMatchRoom* pbroom);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgJoinMatchAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBMatchRoom* pbroom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgAddMatchPlayerAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgAddMatchPlayerAck) */ {
 public:
  MsgAddMatchPlayerAck();
  virtual ~MsgAddMatchPlayerAck();

  MsgAddMatchPlayerAck(const MsgAddMatchPlayerAck& from);

  inline MsgAddMatchPlayerAck& operator=(const MsgAddMatchPlayerAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgAddMatchPlayerAck(MsgAddMatchPlayerAck&& from) noexcept
    : MsgAddMatchPlayerAck() {
    *this = ::std::move(from);
  }

  inline MsgAddMatchPlayerAck& operator=(MsgAddMatchPlayerAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAddMatchPlayerAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgAddMatchPlayerAck* internal_default_instance() {
    return reinterpret_cast<const MsgAddMatchPlayerAck*>(
               &_MsgAddMatchPlayerAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(MsgAddMatchPlayerAck* other);
  friend void swap(MsgAddMatchPlayerAck& a, MsgAddMatchPlayerAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgAddMatchPlayerAck* New() const final {
    return CreateMaybeMessage<MsgAddMatchPlayerAck>(NULL);
  }

  MsgAddMatchPlayerAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgAddMatchPlayerAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgAddMatchPlayerAck& from);
  void MergeFrom(const MsgAddMatchPlayerAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgAddMatchPlayerAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBMatchPlayer pbplayer = 1;
  bool has_pbplayer() const;
  void clear_pbplayer();
  static const int kPbplayerFieldNumber = 1;
  private:
  const ::KFMsg::PBMatchPlayer& _internal_pbplayer() const;
  public:
  const ::KFMsg::PBMatchPlayer& pbplayer() const;
  ::KFMsg::PBMatchPlayer* release_pbplayer();
  ::KFMsg::PBMatchPlayer* mutable_pbplayer();
  void set_allocated_pbplayer(::KFMsg::PBMatchPlayer* pbplayer);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgAddMatchPlayerAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBMatchPlayer* pbplayer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgQueryMatchListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgQueryMatchListReq) */ {
 public:
  MsgQueryMatchListReq();
  virtual ~MsgQueryMatchListReq();

  MsgQueryMatchListReq(const MsgQueryMatchListReq& from);

  inline MsgQueryMatchListReq& operator=(const MsgQueryMatchListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgQueryMatchListReq(MsgQueryMatchListReq&& from) noexcept
    : MsgQueryMatchListReq() {
    *this = ::std::move(from);
  }

  inline MsgQueryMatchListReq& operator=(MsgQueryMatchListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgQueryMatchListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgQueryMatchListReq* internal_default_instance() {
    return reinterpret_cast<const MsgQueryMatchListReq*>(
               &_MsgQueryMatchListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(MsgQueryMatchListReq* other);
  friend void swap(MsgQueryMatchListReq& a, MsgQueryMatchListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgQueryMatchListReq* New() const final {
    return CreateMaybeMessage<MsgQueryMatchListReq>(NULL);
  }

  MsgQueryMatchListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgQueryMatchListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgQueryMatchListReq& from);
  void MergeFrom(const MsgQueryMatchListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgQueryMatchListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint64 roomid = 3;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgQueryMatchListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgQueryMatchListAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgQueryMatchListAck) */ {
 public:
  MsgQueryMatchListAck();
  virtual ~MsgQueryMatchListAck();

  MsgQueryMatchListAck(const MsgQueryMatchListAck& from);

  inline MsgQueryMatchListAck& operator=(const MsgQueryMatchListAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgQueryMatchListAck(MsgQueryMatchListAck&& from) noexcept
    : MsgQueryMatchListAck() {
    *this = ::std::move(from);
  }

  inline MsgQueryMatchListAck& operator=(MsgQueryMatchListAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgQueryMatchListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgQueryMatchListAck* internal_default_instance() {
    return reinterpret_cast<const MsgQueryMatchListAck*>(
               &_MsgQueryMatchListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(MsgQueryMatchListAck* other);
  friend void swap(MsgQueryMatchListAck& a, MsgQueryMatchListAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgQueryMatchListAck* New() const final {
    return CreateMaybeMessage<MsgQueryMatchListAck>(NULL);
  }

  MsgQueryMatchListAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgQueryMatchListAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgQueryMatchListAck& from);
  void MergeFrom(const MsgQueryMatchListAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgQueryMatchListAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBMatchRoom pbroom = 1;
  int pbroom_size() const;
  void clear_pbroom();
  static const int kPbroomFieldNumber = 1;
  ::KFMsg::PBMatchRoom* mutable_pbroom(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchRoom >*
      mutable_pbroom();
  const ::KFMsg::PBMatchRoom& pbroom(int index) const;
  ::KFMsg::PBMatchRoom* add_pbroom();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchRoom >&
      pbroom() const;

  // @@protoc_insertion_point(class_scope:KFMsg.MsgQueryMatchListAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchRoom > pbroom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgKickMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgKickMatchReq) */ {
 public:
  MsgKickMatchReq();
  virtual ~MsgKickMatchReq();

  MsgKickMatchReq(const MsgKickMatchReq& from);

  inline MsgKickMatchReq& operator=(const MsgKickMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgKickMatchReq(MsgKickMatchReq&& from) noexcept
    : MsgKickMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgKickMatchReq& operator=(MsgKickMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgKickMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgKickMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgKickMatchReq*>(
               &_MsgKickMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(MsgKickMatchReq* other);
  friend void swap(MsgKickMatchReq& a, MsgKickMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgKickMatchReq* New() const final {
    return CreateMaybeMessage<MsgKickMatchReq>(NULL);
  }

  MsgKickMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgKickMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgKickMatchReq& from);
  void MergeFrom(const MsgKickMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgKickMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgKickMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgLeaveMatchAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgLeaveMatchAck) */ {
 public:
  MsgLeaveMatchAck();
  virtual ~MsgLeaveMatchAck();

  MsgLeaveMatchAck(const MsgLeaveMatchAck& from);

  inline MsgLeaveMatchAck& operator=(const MsgLeaveMatchAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgLeaveMatchAck(MsgLeaveMatchAck&& from) noexcept
    : MsgLeaveMatchAck() {
    *this = ::std::move(from);
  }

  inline MsgLeaveMatchAck& operator=(MsgLeaveMatchAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgLeaveMatchAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgLeaveMatchAck* internal_default_instance() {
    return reinterpret_cast<const MsgLeaveMatchAck*>(
               &_MsgLeaveMatchAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(MsgLeaveMatchAck* other);
  friend void swap(MsgLeaveMatchAck& a, MsgLeaveMatchAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgLeaveMatchAck* New() const final {
    return CreateMaybeMessage<MsgLeaveMatchAck>(NULL);
  }

  MsgLeaveMatchAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgLeaveMatchAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgLeaveMatchAck& from);
  void MergeFrom(const MsgLeaveMatchAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgLeaveMatchAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgLeaveMatchAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgChangeMatchMasterAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgChangeMatchMasterAck) */ {
 public:
  MsgChangeMatchMasterAck();
  virtual ~MsgChangeMatchMasterAck();

  MsgChangeMatchMasterAck(const MsgChangeMatchMasterAck& from);

  inline MsgChangeMatchMasterAck& operator=(const MsgChangeMatchMasterAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgChangeMatchMasterAck(MsgChangeMatchMasterAck&& from) noexcept
    : MsgChangeMatchMasterAck() {
    *this = ::std::move(from);
  }

  inline MsgChangeMatchMasterAck& operator=(MsgChangeMatchMasterAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgChangeMatchMasterAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgChangeMatchMasterAck* internal_default_instance() {
    return reinterpret_cast<const MsgChangeMatchMasterAck*>(
               &_MsgChangeMatchMasterAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(MsgChangeMatchMasterAck* other);
  friend void swap(MsgChangeMatchMasterAck& a, MsgChangeMatchMasterAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgChangeMatchMasterAck* New() const final {
    return CreateMaybeMessage<MsgChangeMatchMasterAck>(NULL);
  }

  MsgChangeMatchMasterAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgChangeMatchMasterAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgChangeMatchMasterAck& from);
  void MergeFrom(const MsgChangeMatchMasterAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChangeMatchMasterAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgChangeMatchMasterAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgFightMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgFightMatchReq) */ {
 public:
  MsgFightMatchReq();
  virtual ~MsgFightMatchReq();

  MsgFightMatchReq(const MsgFightMatchReq& from);

  inline MsgFightMatchReq& operator=(const MsgFightMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgFightMatchReq(MsgFightMatchReq&& from) noexcept
    : MsgFightMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgFightMatchReq& operator=(MsgFightMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFightMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgFightMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgFightMatchReq*>(
               &_MsgFightMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(MsgFightMatchReq* other);
  friend void swap(MsgFightMatchReq& a, MsgFightMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgFightMatchReq* New() const final {
    return CreateMaybeMessage<MsgFightMatchReq>(NULL);
  }

  MsgFightMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgFightMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgFightMatchReq& from);
  void MergeFrom(const MsgFightMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgFightMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KFMsg.MsgFightMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgPrePareMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgPrePareMatchReq) */ {
 public:
  MsgPrePareMatchReq();
  virtual ~MsgPrePareMatchReq();

  MsgPrePareMatchReq(const MsgPrePareMatchReq& from);

  inline MsgPrePareMatchReq& operator=(const MsgPrePareMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgPrePareMatchReq(MsgPrePareMatchReq&& from) noexcept
    : MsgPrePareMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgPrePareMatchReq& operator=(MsgPrePareMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPrePareMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgPrePareMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgPrePareMatchReq*>(
               &_MsgPrePareMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(MsgPrePareMatchReq* other);
  friend void swap(MsgPrePareMatchReq& a, MsgPrePareMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgPrePareMatchReq* New() const final {
    return CreateMaybeMessage<MsgPrePareMatchReq>(NULL);
  }

  MsgPrePareMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgPrePareMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgPrePareMatchReq& from);
  void MergeFrom(const MsgPrePareMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPrePareMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool prepare = 1;
  void clear_prepare();
  static const int kPrepareFieldNumber = 1;
  bool prepare() const;
  void set_prepare(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgPrePareMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool prepare_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgPrePareMatchAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgPrePareMatchAck) */ {
 public:
  MsgPrePareMatchAck();
  virtual ~MsgPrePareMatchAck();

  MsgPrePareMatchAck(const MsgPrePareMatchAck& from);

  inline MsgPrePareMatchAck& operator=(const MsgPrePareMatchAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgPrePareMatchAck(MsgPrePareMatchAck&& from) noexcept
    : MsgPrePareMatchAck() {
    *this = ::std::move(from);
  }

  inline MsgPrePareMatchAck& operator=(MsgPrePareMatchAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPrePareMatchAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgPrePareMatchAck* internal_default_instance() {
    return reinterpret_cast<const MsgPrePareMatchAck*>(
               &_MsgPrePareMatchAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MsgPrePareMatchAck* other);
  friend void swap(MsgPrePareMatchAck& a, MsgPrePareMatchAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgPrePareMatchAck* New() const final {
    return CreateMaybeMessage<MsgPrePareMatchAck>(NULL);
  }

  MsgPrePareMatchAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgPrePareMatchAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgPrePareMatchAck& from);
  void MergeFrom(const MsgPrePareMatchAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPrePareMatchAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // bool prepare = 2;
  void clear_prepare();
  static const int kPrepareFieldNumber = 2;
  bool prepare() const;
  void set_prepare(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgPrePareMatchAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  bool prepare_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgInviteMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgInviteMatchReq) */ {
 public:
  MsgInviteMatchReq();
  virtual ~MsgInviteMatchReq();

  MsgInviteMatchReq(const MsgInviteMatchReq& from);

  inline MsgInviteMatchReq& operator=(const MsgInviteMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgInviteMatchReq(MsgInviteMatchReq&& from) noexcept
    : MsgInviteMatchReq() {
    *this = ::std::move(from);
  }

  inline MsgInviteMatchReq& operator=(MsgInviteMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgInviteMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgInviteMatchReq* internal_default_instance() {
    return reinterpret_cast<const MsgInviteMatchReq*>(
               &_MsgInviteMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(MsgInviteMatchReq* other);
  friend void swap(MsgInviteMatchReq& a, MsgInviteMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgInviteMatchReq* New() const final {
    return CreateMaybeMessage<MsgInviteMatchReq>(NULL);
  }

  MsgInviteMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgInviteMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgInviteMatchReq& from);
  void MergeFrom(const MsgInviteMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgInviteMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes relationname = 1;
  void clear_relationname();
  static const int kRelationnameFieldNumber = 1;
  const ::std::string& relationname() const;
  void set_relationname(const ::std::string& value);
  #if LANG_CXX11
  void set_relationname(::std::string&& value);
  #endif
  void set_relationname(const char* value);
  void set_relationname(const void* value, size_t size);
  ::std::string* mutable_relationname();
  ::std::string* release_relationname();
  void set_allocated_relationname(::std::string* relationname);

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgInviteMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr relationname_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgInviteMatchAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.MsgInviteMatchAck) */ {
 public:
  MsgInviteMatchAck();
  virtual ~MsgInviteMatchAck();

  MsgInviteMatchAck(const MsgInviteMatchAck& from);

  inline MsgInviteMatchAck& operator=(const MsgInviteMatchAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgInviteMatchAck(MsgInviteMatchAck&& from) noexcept
    : MsgInviteMatchAck() {
    *this = ::std::move(from);
  }

  inline MsgInviteMatchAck& operator=(MsgInviteMatchAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgInviteMatchAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgInviteMatchAck* internal_default_instance() {
    return reinterpret_cast<const MsgInviteMatchAck*>(
               &_MsgInviteMatchAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(MsgInviteMatchAck* other);
  friend void swap(MsgInviteMatchAck& a, MsgInviteMatchAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgInviteMatchAck* New() const final {
    return CreateMaybeMessage<MsgInviteMatchAck>(NULL);
  }

  MsgInviteMatchAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgInviteMatchAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgInviteMatchAck& from);
  void MergeFrom(const MsgInviteMatchAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgInviteMatchAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBMatchRoom pbroom = 2;
  bool has_pbroom() const;
  void clear_pbroom();
  static const int kPbroomFieldNumber = 2;
  private:
  const ::KFMsg::PBMatchRoom& _internal_pbroom() const;
  public:
  const ::KFMsg::PBMatchRoom& pbroom() const;
  ::KFMsg::PBMatchRoom* release_pbroom();
  ::KFMsg::PBMatchRoom* mutable_pbroom();
  void set_allocated_pbroom(::KFMsg::PBMatchRoom* pbroom);

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.MsgInviteMatchAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBMatchRoom* pbroom_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ClientMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgFighterHeroReq

// uint32 heroid = 1;
inline void MsgFighterHeroReq::clear_heroid() {
  heroid_ = 0u;
}
inline ::google::protobuf::uint32 MsgFighterHeroReq::heroid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgFighterHeroReq.heroid)
  return heroid_;
}
inline void MsgFighterHeroReq::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgFighterHeroReq.heroid)
}

// -------------------------------------------------------------------

// MsgEffectUseReq

// uint32 effectid = 1;
inline void MsgEffectUseReq::clear_effectid() {
  effectid_ = 0u;
}
inline ::google::protobuf::uint32 MsgEffectUseReq::effectid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgEffectUseReq.effectid)
  return effectid_;
}
inline void MsgEffectUseReq::set_effectid(::google::protobuf::uint32 value) {
  
  effectid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgEffectUseReq.effectid)
}

// -------------------------------------------------------------------

// MsgFootUseReq

// uint32 footid = 1;
inline void MsgFootUseReq::clear_footid() {
  footid_ = 0u;
}
inline ::google::protobuf::uint32 MsgFootUseReq::footid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgFootUseReq.footid)
  return footid_;
}
inline void MsgFootUseReq::set_footid(::google::protobuf::uint32 value) {
  
  footid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgFootUseReq.footid)
}

// -------------------------------------------------------------------

// MsgStartMatchReq

// bytes version = 1;
inline void MsgStartMatchReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgStartMatchReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgStartMatchReq.version)
  return version_.GetNoArena();
}
inline void MsgStartMatchReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgStartMatchReq.version)
}
#if LANG_CXX11
inline void MsgStartMatchReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgStartMatchReq.version)
}
#endif
inline void MsgStartMatchReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgStartMatchReq.version)
}
inline void MsgStartMatchReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgStartMatchReq.version)
}
inline ::std::string* MsgStartMatchReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgStartMatchReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgStartMatchReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgStartMatchReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgStartMatchReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgStartMatchReq.version)
}

// uint32 matchid = 2;
inline void MsgStartMatchReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 MsgStartMatchReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgStartMatchReq.matchid)
  return matchid_;
}
inline void MsgStartMatchReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgStartMatchReq.matchid)
}

// uint64 serverid = 3;
inline void MsgStartMatchReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgStartMatchReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgStartMatchReq.serverid)
  return serverid_;
}
inline void MsgStartMatchReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgStartMatchReq.serverid)
}

// -------------------------------------------------------------------

// MsgCancelMatchReq

// uint32 matchid = 1;
inline void MsgCancelMatchReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 MsgCancelMatchReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgCancelMatchReq.matchid)
  return matchid_;
}
inline void MsgCancelMatchReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgCancelMatchReq.matchid)
}

// -------------------------------------------------------------------

// MsgInformBattleReq

// uint64 roomid = 1;
inline void MsgInformBattleReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgInformBattleReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgInformBattleReq.roomid)
  return roomid_;
}
inline void MsgInformBattleReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgInformBattleReq.roomid)
}

// uint64 battleid = 2;
inline void MsgInformBattleReq::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgInformBattleReq::battleid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgInformBattleReq.battleid)
  return battleid_;
}
inline void MsgInformBattleReq::set_battleid(::google::protobuf::uint64 value) {
  
  battleid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgInformBattleReq.battleid)
}

// bytes ip = 3;
inline void MsgInformBattleReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgInformBattleReq::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgInformBattleReq.ip)
  return ip_.GetNoArena();
}
inline void MsgInformBattleReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgInformBattleReq.ip)
}
#if LANG_CXX11
inline void MsgInformBattleReq::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgInformBattleReq.ip)
}
#endif
inline void MsgInformBattleReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgInformBattleReq.ip)
}
inline void MsgInformBattleReq::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgInformBattleReq.ip)
}
inline ::std::string* MsgInformBattleReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgInformBattleReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgInformBattleReq::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgInformBattleReq.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgInformBattleReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgInformBattleReq.ip)
}

// uint32 port = 4;
inline void MsgInformBattleReq::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 MsgInformBattleReq::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgInformBattleReq.port)
  return port_;
}
inline void MsgInformBattleReq::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgInformBattleReq.port)
}

// -------------------------------------------------------------------

// MsgInformBattleAck

// -------------------------------------------------------------------

// MsgFinishRoomReq

// uint64 roomid = 1;
inline void MsgFinishRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFinishRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgFinishRoomReq.roomid)
  return roomid_;
}
inline void MsgFinishRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgFinishRoomReq.roomid)
}

// -------------------------------------------------------------------

// MsgTellMatchCount

// uint32 count = 1;
inline void MsgTellMatchCount::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 MsgTellMatchCount::count() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgTellMatchCount.count)
  return count_;
}
inline void MsgTellMatchCount::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgTellMatchCount.count)
}

// -------------------------------------------------------------------

// MsgCreateMatchReq

// bytes version = 1;
inline void MsgCreateMatchReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgCreateMatchReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgCreateMatchReq.version)
  return version_.GetNoArena();
}
inline void MsgCreateMatchReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgCreateMatchReq.version)
}
#if LANG_CXX11
inline void MsgCreateMatchReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgCreateMatchReq.version)
}
#endif
inline void MsgCreateMatchReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgCreateMatchReq.version)
}
inline void MsgCreateMatchReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgCreateMatchReq.version)
}
inline ::std::string* MsgCreateMatchReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgCreateMatchReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgCreateMatchReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgCreateMatchReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgCreateMatchReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgCreateMatchReq.version)
}

// uint32 matchid = 2;
inline void MsgCreateMatchReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 MsgCreateMatchReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgCreateMatchReq.matchid)
  return matchid_;
}
inline void MsgCreateMatchReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgCreateMatchReq.matchid)
}

// uint64 serverid = 3;
inline void MsgCreateMatchReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgCreateMatchReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgCreateMatchReq.serverid)
  return serverid_;
}
inline void MsgCreateMatchReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgCreateMatchReq.serverid)
}

// bytes title = 4;
inline void MsgCreateMatchReq::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgCreateMatchReq::title() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgCreateMatchReq.title)
  return title_.GetNoArena();
}
inline void MsgCreateMatchReq::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgCreateMatchReq.title)
}
#if LANG_CXX11
inline void MsgCreateMatchReq::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgCreateMatchReq.title)
}
#endif
inline void MsgCreateMatchReq::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgCreateMatchReq.title)
}
inline void MsgCreateMatchReq::set_title(const void* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgCreateMatchReq.title)
}
inline ::std::string* MsgCreateMatchReq::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgCreateMatchReq.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgCreateMatchReq::release_title() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgCreateMatchReq.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgCreateMatchReq::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgCreateMatchReq.title)
}

// bytes password = 5;
inline void MsgCreateMatchReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgCreateMatchReq::password() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgCreateMatchReq.password)
  return password_.GetNoArena();
}
inline void MsgCreateMatchReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgCreateMatchReq.password)
}
#if LANG_CXX11
inline void MsgCreateMatchReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgCreateMatchReq.password)
}
#endif
inline void MsgCreateMatchReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgCreateMatchReq.password)
}
inline void MsgCreateMatchReq::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgCreateMatchReq.password)
}
inline ::std::string* MsgCreateMatchReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgCreateMatchReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgCreateMatchReq::release_password() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgCreateMatchReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgCreateMatchReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgCreateMatchReq.password)
}

// bool addrobot = 6;
inline void MsgCreateMatchReq::clear_addrobot() {
  addrobot_ = false;
}
inline bool MsgCreateMatchReq::addrobot() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgCreateMatchReq.addrobot)
  return addrobot_;
}
inline void MsgCreateMatchReq::set_addrobot(bool value) {
  
  addrobot_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgCreateMatchReq.addrobot)
}

// -------------------------------------------------------------------

// MsgJoinMatchReq

// bytes version = 1;
inline void MsgJoinMatchReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgJoinMatchReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgJoinMatchReq.version)
  return version_.GetNoArena();
}
inline void MsgJoinMatchReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgJoinMatchReq.version)
}
#if LANG_CXX11
inline void MsgJoinMatchReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgJoinMatchReq.version)
}
#endif
inline void MsgJoinMatchReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgJoinMatchReq.version)
}
inline void MsgJoinMatchReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgJoinMatchReq.version)
}
inline ::std::string* MsgJoinMatchReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgJoinMatchReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgJoinMatchReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgJoinMatchReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgJoinMatchReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgJoinMatchReq.version)
}

// uint64 roomid = 2;
inline void MsgJoinMatchReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgJoinMatchReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgJoinMatchReq.roomid)
  return roomid_;
}
inline void MsgJoinMatchReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgJoinMatchReq.roomid)
}

// bytes password = 3;
inline void MsgJoinMatchReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgJoinMatchReq::password() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgJoinMatchReq.password)
  return password_.GetNoArena();
}
inline void MsgJoinMatchReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgJoinMatchReq.password)
}
#if LANG_CXX11
inline void MsgJoinMatchReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgJoinMatchReq.password)
}
#endif
inline void MsgJoinMatchReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgJoinMatchReq.password)
}
inline void MsgJoinMatchReq::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgJoinMatchReq.password)
}
inline ::std::string* MsgJoinMatchReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgJoinMatchReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgJoinMatchReq::release_password() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgJoinMatchReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgJoinMatchReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgJoinMatchReq.password)
}

// uint32 matchid = 4;
inline void MsgJoinMatchReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 MsgJoinMatchReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgJoinMatchReq.matchid)
  return matchid_;
}
inline void MsgJoinMatchReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgJoinMatchReq.matchid)
}

// -------------------------------------------------------------------

// MsgJoinMatchAck

// .KFMsg.PBMatchRoom pbroom = 1;
inline bool MsgJoinMatchAck::has_pbroom() const {
  return this != internal_default_instance() && pbroom_ != NULL;
}
inline const ::KFMsg::PBMatchRoom& MsgJoinMatchAck::_internal_pbroom() const {
  return *pbroom_;
}
inline const ::KFMsg::PBMatchRoom& MsgJoinMatchAck::pbroom() const {
  const ::KFMsg::PBMatchRoom* p = pbroom_;
  // @@protoc_insertion_point(field_get:KFMsg.MsgJoinMatchAck.pbroom)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBMatchRoom*>(
      &::KFMsg::_PBMatchRoom_default_instance_);
}
inline ::KFMsg::PBMatchRoom* MsgJoinMatchAck::release_pbroom() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgJoinMatchAck.pbroom)
  
  ::KFMsg::PBMatchRoom* temp = pbroom_;
  pbroom_ = NULL;
  return temp;
}
inline ::KFMsg::PBMatchRoom* MsgJoinMatchAck::mutable_pbroom() {
  
  if (pbroom_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBMatchRoom>(GetArenaNoVirtual());
    pbroom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgJoinMatchAck.pbroom)
  return pbroom_;
}
inline void MsgJoinMatchAck::set_allocated_pbroom(::KFMsg::PBMatchRoom* pbroom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pbroom_);
  }
  if (pbroom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroom, submessage_arena);
    }
    
  } else {
    
  }
  pbroom_ = pbroom;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgJoinMatchAck.pbroom)
}

// -------------------------------------------------------------------

// MsgAddMatchPlayerAck

// .KFMsg.PBMatchPlayer pbplayer = 1;
inline bool MsgAddMatchPlayerAck::has_pbplayer() const {
  return this != internal_default_instance() && pbplayer_ != NULL;
}
inline const ::KFMsg::PBMatchPlayer& MsgAddMatchPlayerAck::_internal_pbplayer() const {
  return *pbplayer_;
}
inline const ::KFMsg::PBMatchPlayer& MsgAddMatchPlayerAck::pbplayer() const {
  const ::KFMsg::PBMatchPlayer* p = pbplayer_;
  // @@protoc_insertion_point(field_get:KFMsg.MsgAddMatchPlayerAck.pbplayer)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBMatchPlayer*>(
      &::KFMsg::_PBMatchPlayer_default_instance_);
}
inline ::KFMsg::PBMatchPlayer* MsgAddMatchPlayerAck::release_pbplayer() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgAddMatchPlayerAck.pbplayer)
  
  ::KFMsg::PBMatchPlayer* temp = pbplayer_;
  pbplayer_ = NULL;
  return temp;
}
inline ::KFMsg::PBMatchPlayer* MsgAddMatchPlayerAck::mutable_pbplayer() {
  
  if (pbplayer_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBMatchPlayer>(GetArenaNoVirtual());
    pbplayer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgAddMatchPlayerAck.pbplayer)
  return pbplayer_;
}
inline void MsgAddMatchPlayerAck::set_allocated_pbplayer(::KFMsg::PBMatchPlayer* pbplayer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pbplayer_);
  }
  if (pbplayer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbplayer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbplayer, submessage_arena);
    }
    
  } else {
    
  }
  pbplayer_ = pbplayer;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgAddMatchPlayerAck.pbplayer)
}

// -------------------------------------------------------------------

// MsgQueryMatchListReq

// uint32 matchid = 1;
inline void MsgQueryMatchListReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 MsgQueryMatchListReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgQueryMatchListReq.matchid)
  return matchid_;
}
inline void MsgQueryMatchListReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgQueryMatchListReq.matchid)
}

// bytes version = 2;
inline void MsgQueryMatchListReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgQueryMatchListReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgQueryMatchListReq.version)
  return version_.GetNoArena();
}
inline void MsgQueryMatchListReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgQueryMatchListReq.version)
}
#if LANG_CXX11
inline void MsgQueryMatchListReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgQueryMatchListReq.version)
}
#endif
inline void MsgQueryMatchListReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgQueryMatchListReq.version)
}
inline void MsgQueryMatchListReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgQueryMatchListReq.version)
}
inline ::std::string* MsgQueryMatchListReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgQueryMatchListReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgQueryMatchListReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgQueryMatchListReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgQueryMatchListReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgQueryMatchListReq.version)
}

// uint64 roomid = 3;
inline void MsgQueryMatchListReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgQueryMatchListReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgQueryMatchListReq.roomid)
  return roomid_;
}
inline void MsgQueryMatchListReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgQueryMatchListReq.roomid)
}

// -------------------------------------------------------------------

// MsgQueryMatchListAck

// repeated .KFMsg.PBMatchRoom pbroom = 1;
inline int MsgQueryMatchListAck::pbroom_size() const {
  return pbroom_.size();
}
inline ::KFMsg::PBMatchRoom* MsgQueryMatchListAck::mutable_pbroom(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgQueryMatchListAck.pbroom)
  return pbroom_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchRoom >*
MsgQueryMatchListAck::mutable_pbroom() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.MsgQueryMatchListAck.pbroom)
  return &pbroom_;
}
inline const ::KFMsg::PBMatchRoom& MsgQueryMatchListAck::pbroom(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgQueryMatchListAck.pbroom)
  return pbroom_.Get(index);
}
inline ::KFMsg::PBMatchRoom* MsgQueryMatchListAck::add_pbroom() {
  // @@protoc_insertion_point(field_add:KFMsg.MsgQueryMatchListAck.pbroom)
  return pbroom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMatchRoom >&
MsgQueryMatchListAck::pbroom() const {
  // @@protoc_insertion_point(field_list:KFMsg.MsgQueryMatchListAck.pbroom)
  return pbroom_;
}

// -------------------------------------------------------------------

// MsgKickMatchReq

// uint64 playerid = 1;
inline void MsgKickMatchReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgKickMatchReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgKickMatchReq.playerid)
  return playerid_;
}
inline void MsgKickMatchReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgKickMatchReq.playerid)
}

// -------------------------------------------------------------------

// MsgLeaveMatchAck

// uint64 playerid = 1;
inline void MsgLeaveMatchAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgLeaveMatchAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgLeaveMatchAck.playerid)
  return playerid_;
}
inline void MsgLeaveMatchAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgLeaveMatchAck.playerid)
}

// uint32 type = 2;
inline void MsgLeaveMatchAck::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 MsgLeaveMatchAck::type() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgLeaveMatchAck.type)
  return type_;
}
inline void MsgLeaveMatchAck::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgLeaveMatchAck.type)
}

// -------------------------------------------------------------------

// MsgChangeMatchMasterAck

// uint64 playerid = 1;
inline void MsgChangeMatchMasterAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgChangeMatchMasterAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgChangeMatchMasterAck.playerid)
  return playerid_;
}
inline void MsgChangeMatchMasterAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgChangeMatchMasterAck.playerid)
}

// bytes name = 2;
inline void MsgChangeMatchMasterAck::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgChangeMatchMasterAck::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgChangeMatchMasterAck.name)
  return name_.GetNoArena();
}
inline void MsgChangeMatchMasterAck::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgChangeMatchMasterAck.name)
}
#if LANG_CXX11
inline void MsgChangeMatchMasterAck::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgChangeMatchMasterAck.name)
}
#endif
inline void MsgChangeMatchMasterAck::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgChangeMatchMasterAck.name)
}
inline void MsgChangeMatchMasterAck::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgChangeMatchMasterAck.name)
}
inline ::std::string* MsgChangeMatchMasterAck::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgChangeMatchMasterAck.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgChangeMatchMasterAck::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgChangeMatchMasterAck.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgChangeMatchMasterAck::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgChangeMatchMasterAck.name)
}

// -------------------------------------------------------------------

// MsgFightMatchReq

// -------------------------------------------------------------------

// MsgPrePareMatchReq

// bool prepare = 1;
inline void MsgPrePareMatchReq::clear_prepare() {
  prepare_ = false;
}
inline bool MsgPrePareMatchReq::prepare() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgPrePareMatchReq.prepare)
  return prepare_;
}
inline void MsgPrePareMatchReq::set_prepare(bool value) {
  
  prepare_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgPrePareMatchReq.prepare)
}

// -------------------------------------------------------------------

// MsgPrePareMatchAck

// uint64 playerid = 1;
inline void MsgPrePareMatchAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgPrePareMatchAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgPrePareMatchAck.playerid)
  return playerid_;
}
inline void MsgPrePareMatchAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgPrePareMatchAck.playerid)
}

// bool prepare = 2;
inline void MsgPrePareMatchAck::clear_prepare() {
  prepare_ = false;
}
inline bool MsgPrePareMatchAck::prepare() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgPrePareMatchAck.prepare)
  return prepare_;
}
inline void MsgPrePareMatchAck::set_prepare(bool value) {
  
  prepare_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgPrePareMatchAck.prepare)
}

// -------------------------------------------------------------------

// MsgInviteMatchReq

// bytes relationname = 1;
inline void MsgInviteMatchReq::clear_relationname() {
  relationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgInviteMatchReq::relationname() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgInviteMatchReq.relationname)
  return relationname_.GetNoArena();
}
inline void MsgInviteMatchReq::set_relationname(const ::std::string& value) {
  
  relationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.MsgInviteMatchReq.relationname)
}
#if LANG_CXX11
inline void MsgInviteMatchReq::set_relationname(::std::string&& value) {
  
  relationname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.MsgInviteMatchReq.relationname)
}
#endif
inline void MsgInviteMatchReq::set_relationname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  relationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.MsgInviteMatchReq.relationname)
}
inline void MsgInviteMatchReq::set_relationname(const void* value, size_t size) {
  
  relationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.MsgInviteMatchReq.relationname)
}
inline ::std::string* MsgInviteMatchReq::mutable_relationname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgInviteMatchReq.relationname)
  return relationname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgInviteMatchReq::release_relationname() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgInviteMatchReq.relationname)
  
  return relationname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgInviteMatchReq::set_allocated_relationname(::std::string* relationname) {
  if (relationname != NULL) {
    
  } else {
    
  }
  relationname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relationname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgInviteMatchReq.relationname)
}

// uint64 playerid = 2;
inline void MsgInviteMatchReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgInviteMatchReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgInviteMatchReq.playerid)
  return playerid_;
}
inline void MsgInviteMatchReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgInviteMatchReq.playerid)
}

// -------------------------------------------------------------------

// MsgInviteMatchAck

// uint64 playerid = 1;
inline void MsgInviteMatchAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgInviteMatchAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.MsgInviteMatchAck.playerid)
  return playerid_;
}
inline void MsgInviteMatchAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.MsgInviteMatchAck.playerid)
}

// .KFMsg.PBMatchRoom pbroom = 2;
inline bool MsgInviteMatchAck::has_pbroom() const {
  return this != internal_default_instance() && pbroom_ != NULL;
}
inline const ::KFMsg::PBMatchRoom& MsgInviteMatchAck::_internal_pbroom() const {
  return *pbroom_;
}
inline const ::KFMsg::PBMatchRoom& MsgInviteMatchAck::pbroom() const {
  const ::KFMsg::PBMatchRoom* p = pbroom_;
  // @@protoc_insertion_point(field_get:KFMsg.MsgInviteMatchAck.pbroom)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBMatchRoom*>(
      &::KFMsg::_PBMatchRoom_default_instance_);
}
inline ::KFMsg::PBMatchRoom* MsgInviteMatchAck::release_pbroom() {
  // @@protoc_insertion_point(field_release:KFMsg.MsgInviteMatchAck.pbroom)
  
  ::KFMsg::PBMatchRoom* temp = pbroom_;
  pbroom_ = NULL;
  return temp;
}
inline ::KFMsg::PBMatchRoom* MsgInviteMatchAck::mutable_pbroom() {
  
  if (pbroom_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBMatchRoom>(GetArenaNoVirtual());
    pbroom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.MsgInviteMatchAck.pbroom)
  return pbroom_;
}
inline void MsgInviteMatchAck::set_allocated_pbroom(::KFMsg::PBMatchRoom* pbroom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pbroom_);
  }
  if (pbroom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbroom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbroom, submessage_arena);
    }
    
  } else {
    
  }
  pbroom_ = pbroom;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.MsgInviteMatchAck.pbroom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KFMsg::ClientProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::ClientProtocol>() {
  return ::KFMsg::ClientProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)


#ifdef _MSC_VER
	#pragma warning(  pop  )
#endif
#endif  // PROTOBUF_INCLUDED_ClientMessage_2eproto
