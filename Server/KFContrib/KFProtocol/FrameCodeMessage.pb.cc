// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameCodeMessage.proto

#include "FrameCodeMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace KFMsg {
}  // namespace KFMsg
namespace protobuf_FrameCodeMessage_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "FrameCodeMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026FrameCodeMessage.proto\022\005KFMsg*\252\022\n\rFram"
      "eCodeEnum\022\t\n\005Error\020\000\022\006\n\002Ok\020\001\022\022\n\rHttpData"
      "Error\020\220N\022\025\n\020AuthDatabaseBusy\020\221N\022\023\n\016AuthS"
      "erverBusy\020\222N\022\023\n\016ZoneServerBusy\020\223N\022\025\n\020Zon"
      "eDatabaseBusy\020\224N\022\025\n\020NameDatabaseBusy\020\225N\022"
      "\023\n\016DataServerBusy\020\226N\022\023\n\016MailServerBusy\020\227"
      "N\022\023\n\016RankServerBusy\020\230N\022\027\n\022PublicDatabase"
      "Busy\020\231N\022\027\n\022RelationServerBusy\020\232N\022\024\n\017Matc"
      "hServerBusy\020\233N\022\026\n\021LoginDatabaseBusy\020\234N\022\023"
      "\n\016AccountIsEmpty\020\371U\022\026\n\021ActivationAccount"
      "\020\372U\022\032\n\025InvalidActivationCode\020\373U\022\030\n\023Activ"
      "ationCodeError\020\374U\022\024\n\017LoginTokenError\020\375U\022"
      "\023\n\016BanForbidLogin\020\376U\022\026\n\021ChannelNotSuppor"
      "t\020\377U\022\023\n\016ChannelNotOpen\020\200V\022\021\n\014ChannelErro"
      "r\020\201V\022\020\n\013WeiXinError\020\202V\022\024\n\017WeiXinUserErro"
      "r\020\203V\022\025\n\020WeiXinTokenError\020\204V\022\024\n\017WeiXinCod"
      "eError\020\205V\022\027\n\022WeiXinTokenTimeout\020\206V\022\017\n\nSt"
      "eamError\020\207V\022\023\n\016SteamDataError\020\210V\022\023\n\016Stea"
      "mAuthError\020\211V\022\034\n\027VersionNotCompatibility"
      "\020\341]\022\021\n\014LoginIsClose\020\342]\022\027\n\022LoginNoLoginSe"
      "rver\020\343]\022\024\n\017LoginSystemBusy\020\344]\022\031\n\024LoginWo"
      "rldSystemBusy\020\345]\022\026\n\021LoginNoGameServer\020\346]"
      "\022\030\n\023LoginGameServerBusy\020\347]\022\031\n\024LoginBindP"
      "layerError\020\350]\022\030\n\023LoginLoadDataFailed\020\351]\022"
      "\027\n\022LoginAlreadyOnline\020\352]\022\026\n\021QueryPlayerF"
      "ailed\020\305^\022\025\n\020NameAlreadyExist\020\306^\022\016\n\tNameS"
      "etOk\020\307^\022\024\n\017NameLengthError\020\310^\022\024\n\017NameFil"
      "terError\020\311^\022\016\n\tNameEmpty\020\312^\022\023\n\016NameAlrea"
      "dySet\020\313^\022\r\n\010SexSetOK\020\314^\022\026\n\021AchieveCanNot"
      "Find\020\316^\022\032\n\025AchieveCanNotFindData\020\317^\022\023\n\016A"
      "chieveNotDone\020\320^\022\033\n\026AchieveAlreadyReceiv"
      "ed\020\321^\022\025\n\020AchieveReceiveOk\020\322^\022\023\n\016TaskCanN"
      "otFind\020\330^\022\027\n\022TaskCanNotFindData\020\331^\022\020\n\013Ta"
      "skNotDone\020\332^\022\030\n\023TaskAlreadyReceived\020\333^\022\021"
      "\n\014TaskRewardOk\020\334^\022\027\n\022ActivityCanNotFind\020"
      "\342^\022\033\n\026ActivityCanNotFindData\020\343^\022\034\n\027Activ"
      "ityAlreadyReceived\020\344^\022\024\n\017ActivityNotDone"
      "\020\345^\022\025\n\020ActivityRewardOk\020\346^\022\025\n\020CompoundNo"
      "tExist\020\354^\022\032\n\025CompoundNotEnoughData\020\355^\022\017\n"
      "\nCompoundOk\020\356^\022\023\n\016ItemCanNotFind\020\366^\022\027\n\022I"
      "temCanNotFindData\020\367^\022\022\n\rItemCanNotUse\020\370^"
      "\022\021\n\014SignInNotDay\020\212_\022\025\n\020SignInCanNotFind\020"
      "\213_\022\030\n\023SignInRewardAlready\020\214_\022\023\n\016SignInRe"
      "wardOk\020\215_\022\021\n\014MailNotExist\020\250_\022\020\n\013MailTime"
      "Out\020\251_\022\025\n\020MailDeleteFailed\020\252_\022\030\n\023MailAlr"
      "eadyReceived\020\253_\022\026\n\021MailNotHaveReward\020\254_\022"
      "\021\n\014StoreNotFind\020\214`\022\027\n\022StoreBuyCountError"
      "\020\215`\022\027\n\022StoreOutOfLimitOwm\020\216`\022\025\n\020StoreOut"
      "OfLimits\020\217`\022\022\n\rStoreLackCost\020\220`\022\026\n\021Store"
      "BuyTypeError\020\221`\022\017\n\nStoreBuyOK\020\222`\022\021\n\014Rank"
      "NotExist\020\360`\022\027\n\022QueryBasicNotExist\020\324a\022\027\n\022"
      "MessageFilterError\020\270b\022\022\n\rFriendAlready\020\271"
      "b\022\024\n\017FriendSelfLimit\020\272b\022\024\n\017FriendInviteR"
      "eq\020\273b\022\033\n\026FriendRefuseYourInvite\020\274b\022\020\n\013Fr"
      "iendAddOk\020\275b\022\023\n\016FriendNotExist\020\276b\022\020\n\013Fri"
      "endDelOk\020\277b\022\024\n\017FriendLinessAdd\020\300b\022\027\n\022Fri"
      "endRefuseInvite\020\301b\022\026\n\021FriendTargetLimit\020"
      "\302b\022\030\n\023FriendInviteAlready\020\303b\022\026\n\021FriendIn"
      "viteLimit\020\304b\022\023\n\016FriendInviteOk\020\305b\022\031\n\024Fri"
      "endInviteNotExist\020\306bb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FrameCodeMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_FrameCodeMessage_2eproto
namespace KFMsg {
const ::google::protobuf::EnumDescriptor* FrameCodeEnum_descriptor() {
  protobuf_FrameCodeMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FrameCodeMessage_2eproto::file_level_enum_descriptors[0];
}
bool FrameCodeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11009:
    case 11010:
    case 11011:
    case 11012:
    case 11013:
    case 11014:
    case 11015:
    case 11016:
    case 11017:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12110:
    case 12111:
    case 12112:
    case 12113:
    case 12114:
    case 12120:
    case 12121:
    case 12122:
    case 12123:
    case 12124:
    case 12130:
    case 12131:
    case 12132:
    case 12133:
    case 12134:
    case 12140:
    case 12141:
    case 12142:
    case 12150:
    case 12151:
    case 12152:
    case 12170:
    case 12171:
    case 12172:
    case 12173:
    case 12200:
    case 12201:
    case 12202:
    case 12203:
    case 12204:
    case 12300:
    case 12301:
    case 12302:
    case 12303:
    case 12304:
    case 12305:
    case 12306:
    case 12400:
    case 12500:
    case 12600:
    case 12601:
    case 12602:
    case 12603:
    case 12604:
    case 12605:
    case 12606:
    case 12607:
    case 12608:
    case 12609:
    case 12610:
    case 12611:
    case 12612:
    case 12613:
    case 12614:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KFMsg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
