// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMessage.proto

#include "ServerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_DefineMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DefineMessage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PBMatchPlayer;
}  // namespace protobuf_DefineMessage_2eproto
namespace protobuf_FrameDefineMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_FrameDefineMessage_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PBObject;
}  // namespace protobuf_FrameDefineMessage_2eproto
namespace protobuf_ServerMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ServerMessage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_S2SAffirmMatchToShardReq_HeroEntry_DoNotUse;
}  // namespace protobuf_ServerMessage_2eproto
namespace KFMsg {
class S2SRegisterBattleToRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SRegisterBattleToRoomReq>
      _instance;
} _S2SRegisterBattleToRoomReq_default_instance_;
class S2SRegisterBattleToBattleAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SRegisterBattleToBattleAck>
      _instance;
} _S2SRegisterBattleToBattleAck_default_instance_;
class S2SOpenRoomToBattleReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SOpenRoomToBattleReq>
      _instance;
} _S2SOpenRoomToBattleReq_default_instance_;
class S2SOpenRoomToRoomAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SOpenRoomToRoomAck>
      _instance;
} _S2SOpenRoomToRoomAck_default_instance_;
class S2SFinishRoomToRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SFinishRoomToRoomReq>
      _instance;
} _S2SFinishRoomToRoomReq_default_instance_;
class S2SFinishRoomToBattleAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SFinishRoomToBattleAck>
      _instance;
} _S2SFinishRoomToBattleAck_default_instance_;
class S2SHeartBeatToRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SHeartBeatToRoomReq>
      _instance;
} _S2SHeartBeatToRoomReq_default_instance_;
class S2SStartMatchToShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SStartMatchToShardReq>
      _instance;
} _S2SStartMatchToShardReq_default_instance_;
class S2SStartMatchToGameAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SStartMatchToGameAck>
      _instance;
} _S2SStartMatchToGameAck_default_instance_;
class S2SCancelMatchToShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SCancelMatchToShardReq>
      _instance;
} _S2SCancelMatchToShardReq_default_instance_;
class S2SCreateRoomToRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SCreateRoomToRoomReq>
      _instance;
} _S2SCreateRoomToRoomReq_default_instance_;
class S2SCreateRoomToMatchAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SCreateRoomToMatchAck>
      _instance;
} _S2SCreateRoomToMatchAck_default_instance_;
class S2SAffirmMatchTimeoutToGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SAffirmMatchTimeoutToGame>
      _instance;
} _S2SAffirmMatchTimeoutToGame_default_instance_;
class S2SAffirmMatchToShardReq_HeroEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SAffirmMatchToShardReq_HeroEntry_DoNotUse>
      _instance;
} _S2SAffirmMatchToShardReq_HeroEntry_DoNotUse_default_instance_;
class S2SAffirmMatchToShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SAffirmMatchToShardReq>
      _instance;
} _S2SAffirmMatchToShardReq_default_instance_;
class S2SInformBattleToGameReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SInformBattleToGameReq>
      _instance;
} _S2SInformBattleToGameReq_default_instance_;
class S2SInformBattleToRoomAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SInformBattleToRoomAck>
      _instance;
} _S2SInformBattleToRoomAck_default_instance_;
class S2SQueryRoomToRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryRoomToRoomReq>
      _instance;
} _S2SQueryRoomToRoomReq_default_instance_;
class S2SQueryRoomToGameAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryRoomToGameAck>
      _instance;
} _S2SQueryRoomToGameAck_default_instance_;
class S2SFinishRoomToGameReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SFinishRoomToGameReq>
      _instance;
} _S2SFinishRoomToGameReq_default_instance_;
class S2SQueryMatchToMatchReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryMatchToMatchReq>
      _instance;
} _S2SQueryMatchToMatchReq_default_instance_;
class S2SQueryMatchToGameAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryMatchToGameAck>
      _instance;
} _S2SQueryMatchToGameAck_default_instance_;
}  // namespace KFMsg
namespace protobuf_ServerMessage_2eproto {
static void InitDefaultsS2SRegisterBattleToRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SRegisterBattleToRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SRegisterBattleToRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SRegisterBattleToRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SRegisterBattleToRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SRegisterBattleToRoomReq}, {}};

static void InitDefaultsS2SRegisterBattleToBattleAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SRegisterBattleToBattleAck_default_instance_;
    new (ptr) ::KFMsg::S2SRegisterBattleToBattleAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SRegisterBattleToBattleAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SRegisterBattleToBattleAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SRegisterBattleToBattleAck}, {}};

static void InitDefaultsS2SOpenRoomToBattleReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SOpenRoomToBattleReq_default_instance_;
    new (ptr) ::KFMsg::S2SOpenRoomToBattleReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SOpenRoomToBattleReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_S2SOpenRoomToBattleReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2SOpenRoomToBattleReq}, {
      &protobuf_DefineMessage_2eproto::scc_info_PBMatchPlayer.base,}};

static void InitDefaultsS2SOpenRoomToRoomAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SOpenRoomToRoomAck_default_instance_;
    new (ptr) ::KFMsg::S2SOpenRoomToRoomAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SOpenRoomToRoomAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SOpenRoomToRoomAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SOpenRoomToRoomAck}, {}};

static void InitDefaultsS2SFinishRoomToRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SFinishRoomToRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SFinishRoomToRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SFinishRoomToRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SFinishRoomToRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SFinishRoomToRoomReq}, {}};

static void InitDefaultsS2SFinishRoomToBattleAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SFinishRoomToBattleAck_default_instance_;
    new (ptr) ::KFMsg::S2SFinishRoomToBattleAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SFinishRoomToBattleAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SFinishRoomToBattleAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SFinishRoomToBattleAck}, {}};

static void InitDefaultsS2SHeartBeatToRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SHeartBeatToRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SHeartBeatToRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SHeartBeatToRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SHeartBeatToRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SHeartBeatToRoomReq}, {}};

static void InitDefaultsS2SStartMatchToShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SStartMatchToShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SStartMatchToShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SStartMatchToShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_S2SStartMatchToShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2SStartMatchToShardReq}, {
      &protobuf_DefineMessage_2eproto::scc_info_PBMatchPlayer.base,}};

static void InitDefaultsS2SStartMatchToGameAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SStartMatchToGameAck_default_instance_;
    new (ptr) ::KFMsg::S2SStartMatchToGameAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SStartMatchToGameAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SStartMatchToGameAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SStartMatchToGameAck}, {}};

static void InitDefaultsS2SCancelMatchToShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SCancelMatchToShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SCancelMatchToShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SCancelMatchToShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SCancelMatchToShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SCancelMatchToShardReq}, {}};

static void InitDefaultsS2SCreateRoomToRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SCreateRoomToRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SCreateRoomToRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SCreateRoomToRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_S2SCreateRoomToRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2SCreateRoomToRoomReq}, {
      &protobuf_DefineMessage_2eproto::scc_info_PBMatchPlayer.base,}};

static void InitDefaultsS2SCreateRoomToMatchAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SCreateRoomToMatchAck_default_instance_;
    new (ptr) ::KFMsg::S2SCreateRoomToMatchAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SCreateRoomToMatchAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SCreateRoomToMatchAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SCreateRoomToMatchAck}, {}};

static void InitDefaultsS2SAffirmMatchTimeoutToGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SAffirmMatchTimeoutToGame_default_instance_;
    new (ptr) ::KFMsg::S2SAffirmMatchTimeoutToGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SAffirmMatchTimeoutToGame::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SAffirmMatchTimeoutToGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SAffirmMatchTimeoutToGame}, {}};

static void InitDefaultsS2SAffirmMatchToShardReq_HeroEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SAffirmMatchToShardReq_HeroEntry_DoNotUse_default_instance_;
    new (ptr) ::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse();
  }
  ::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_S2SAffirmMatchToShardReq_HeroEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2SAffirmMatchToShardReq_HeroEntry_DoNotUse}, {
      &protobuf_FrameDefineMessage_2eproto::scc_info_PBObject.base,}};

static void InitDefaultsS2SAffirmMatchToShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SAffirmMatchToShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SAffirmMatchToShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SAffirmMatchToShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_S2SAffirmMatchToShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2SAffirmMatchToShardReq}, {
      &protobuf_ServerMessage_2eproto::scc_info_S2SAffirmMatchToShardReq_HeroEntry_DoNotUse.base,}};

static void InitDefaultsS2SInformBattleToGameReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SInformBattleToGameReq_default_instance_;
    new (ptr) ::KFMsg::S2SInformBattleToGameReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SInformBattleToGameReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SInformBattleToGameReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SInformBattleToGameReq}, {}};

static void InitDefaultsS2SInformBattleToRoomAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SInformBattleToRoomAck_default_instance_;
    new (ptr) ::KFMsg::S2SInformBattleToRoomAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SInformBattleToRoomAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SInformBattleToRoomAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SInformBattleToRoomAck}, {}};

static void InitDefaultsS2SQueryRoomToRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryRoomToRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SQueryRoomToRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryRoomToRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryRoomToRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryRoomToRoomReq}, {}};

static void InitDefaultsS2SQueryRoomToGameAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryRoomToGameAck_default_instance_;
    new (ptr) ::KFMsg::S2SQueryRoomToGameAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryRoomToGameAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryRoomToGameAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryRoomToGameAck}, {}};

static void InitDefaultsS2SFinishRoomToGameReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SFinishRoomToGameReq_default_instance_;
    new (ptr) ::KFMsg::S2SFinishRoomToGameReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SFinishRoomToGameReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SFinishRoomToGameReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SFinishRoomToGameReq}, {}};

static void InitDefaultsS2SQueryMatchToMatchReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryMatchToMatchReq_default_instance_;
    new (ptr) ::KFMsg::S2SQueryMatchToMatchReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryMatchToMatchReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryMatchToMatchReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryMatchToMatchReq}, {}};

static void InitDefaultsS2SQueryMatchToGameAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryMatchToGameAck_default_instance_;
    new (ptr) ::KFMsg::S2SQueryMatchToGameAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryMatchToGameAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryMatchToGameAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryMatchToGameAck}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_S2SRegisterBattleToRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SRegisterBattleToBattleAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SOpenRoomToBattleReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SOpenRoomToRoomAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SFinishRoomToRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SFinishRoomToBattleAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SHeartBeatToRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SStartMatchToShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SStartMatchToGameAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SCancelMatchToShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SCreateRoomToRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SCreateRoomToMatchAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SAffirmMatchTimeoutToGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SAffirmMatchToShardReq_HeroEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SAffirmMatchToShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SInformBattleToGameReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SInformBattleToRoomAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryRoomToRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryRoomToGameAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SFinishRoomToGameReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryMatchToMatchReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryMatchToGameAck.base);
}

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterBattleToRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterBattleToRoomReq, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterBattleToRoomReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterBattleToRoomReq, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterBattleToRoomReq, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterBattleToBattleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterBattleToBattleAck, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToBattleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToBattleReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToBattleReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToBattleReq, roomserverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToBattleReq, pbplayer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToRoomAck, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SOpenRoomToRoomAck, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SFinishRoomToRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SFinishRoomToRoomReq, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SFinishRoomToBattleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SFinishRoomToBattleAck, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SHeartBeatToRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SHeartBeatToRoomReq, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToShardReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToShardReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToShardReq, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToShardReq, pbplayer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToGameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToGameAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToGameAck, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToGameAck, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SStartMatchToGameAck, serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToShardReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToShardReq, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToRoomReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToRoomReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToRoomReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToRoomReq, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToRoomReq, pbplayer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToMatchAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCreateRoomToMatchAck, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchTimeoutToGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchTimeoutToGame, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchToShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchToShardReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SAffirmMatchToShardReq, hero_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToGameReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToGameReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToGameReq, battleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToGameReq, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToGameReq, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToRoomAck, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SInformBattleToRoomAck, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToRoomReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToRoomReq, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToGameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToGameAck, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SFinishRoomToGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SFinishRoomToGameReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SFinishRoomToGameReq, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchToMatchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchToMatchReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchToMatchReq, matchid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchToGameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchToGameAck, playerid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KFMsg::S2SRegisterBattleToRoomReq)},
  { 9, -1, sizeof(::KFMsg::S2SRegisterBattleToBattleAck)},
  { 15, -1, sizeof(::KFMsg::S2SOpenRoomToBattleReq)},
  { 24, -1, sizeof(::KFMsg::S2SOpenRoomToRoomAck)},
  { 31, -1, sizeof(::KFMsg::S2SFinishRoomToRoomReq)},
  { 37, -1, sizeof(::KFMsg::S2SFinishRoomToBattleAck)},
  { 43, -1, sizeof(::KFMsg::S2SHeartBeatToRoomReq)},
  { 49, -1, sizeof(::KFMsg::S2SStartMatchToShardReq)},
  { 58, -1, sizeof(::KFMsg::S2SStartMatchToGameAck)},
  { 67, -1, sizeof(::KFMsg::S2SCancelMatchToShardReq)},
  { 74, -1, sizeof(::KFMsg::S2SCreateRoomToRoomReq)},
  { 84, -1, sizeof(::KFMsg::S2SCreateRoomToMatchAck)},
  { 90, -1, sizeof(::KFMsg::S2SAffirmMatchTimeoutToGame)},
  { 96, 103, sizeof(::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse)},
  { 105, -1, sizeof(::KFMsg::S2SAffirmMatchToShardReq)},
  { 112, -1, sizeof(::KFMsg::S2SInformBattleToGameReq)},
  { 122, -1, sizeof(::KFMsg::S2SInformBattleToRoomAck)},
  { 129, -1, sizeof(::KFMsg::S2SQueryRoomToRoomReq)},
  { 136, -1, sizeof(::KFMsg::S2SQueryRoomToGameAck)},
  { 142, -1, sizeof(::KFMsg::S2SFinishRoomToGameReq)},
  { 149, -1, sizeof(::KFMsg::S2SQueryMatchToMatchReq)},
  { 156, -1, sizeof(::KFMsg::S2SQueryMatchToGameAck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SRegisterBattleToRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SRegisterBattleToBattleAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SOpenRoomToBattleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SOpenRoomToRoomAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SFinishRoomToRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SFinishRoomToBattleAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SHeartBeatToRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SStartMatchToShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SStartMatchToGameAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SCancelMatchToShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SCreateRoomToRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SCreateRoomToMatchAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SAffirmMatchTimeoutToGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SAffirmMatchToShardReq_HeroEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SAffirmMatchToShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SInformBattleToGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SInformBattleToRoomAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryRoomToRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryRoomToGameAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SFinishRoomToGameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryMatchToMatchReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryMatchToGameAck_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ServerMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023ServerMessage.proto\022\005KFMsg\032\023DefineMess"
      "age.proto\032\030FrameDefineMessage.proto\"Y\n\032S"
      "2SRegisterBattleToRoomReq\022\020\n\010serverid\030\001 "
      "\001(\004\022\017\n\007version\030\002 \001(\014\022\n\n\002ip\030\003 \001(\014\022\014\n\004port"
      "\030\004 \001(\r\".\n\034S2SRegisterBattleToBattleAck\022\016"
      "\n\006result\030\001 \001(\010\"w\n\026S2SOpenRoomToBattleReq"
      "\022\016\n\006roomid\030\001 \001(\004\022\017\n\007matchid\030\002 \001(\r\022\024\n\014roo"
      "mserverid\030\003 \001(\004\022&\n\010pbplayer\030\004 \003(\0132\024.KFMs"
      "g.PBMatchPlayer\"6\n\024S2SOpenRoomToRoomAck\022"
      "\016\n\006roomid\030\001 \001(\004\022\016\n\006result\030\002 \001(\010\"(\n\026S2SFi"
      "nishRoomToRoomReq\022\016\n\006roomid\030\001 \001(\004\"*\n\030S2S"
      "FinishRoomToBattleAck\022\016\n\006roomid\030\001 \001(\004\"\'\n"
      "\025S2SHeartBeatToRoomReq\022\016\n\006roomid\030\001 \001(\004\"u"
      "\n\027S2SStartMatchToShardReq\022\017\n\007version\030\001 \001"
      "(\014\022\017\n\007matchid\030\002 \001(\r\022\020\n\010serverid\030\003 \001(\004\022&\n"
      "\010pbplayer\030\004 \001(\0132\024.KFMsg.PBMatchPlayer\"]\n"
      "\026S2SStartMatchToGameAck\022\016\n\006result\030\001 \001(\r\022"
      "\017\n\007matchid\030\002 \001(\r\022\020\n\010playerid\030\003 \001(\004\022\020\n\010se"
      "rverid\030\004 \001(\004\"=\n\030S2SCancelMatchToShardReq"
      "\022\017\n\007matchid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\004\"\204\001\n\026"
      "S2SCreateRoomToRoomReq\022\017\n\007matchid\030\001 \001(\r\022"
      "\016\n\006roomid\030\002 \001(\004\022\017\n\007version\030\003 \001(\014\022\020\n\010serv"
      "erid\030\004 \001(\004\022&\n\010pbplayer\030\005 \003(\0132\024.KFMsg.PBM"
      "atchPlayer\")\n\027S2SCreateRoomToMatchAck\022\016\n"
      "\006roomid\030\001 \001(\004\"/\n\033S2SAffirmMatchTimeoutTo"
      "Game\022\020\n\010playerid\030\001 \001(\004\"\243\001\n\030S2SAffirmMatc"
      "hToShardReq\022\020\n\010playerid\030\001 \001(\004\0227\n\004hero\030\002 "
      "\003(\0132).KFMsg.S2SAffirmMatchToShardReq.Her"
      "oEntry\032<\n\tHeroEntry\022\013\n\003key\030\001 \001(\004\022\036\n\005valu"
      "e\030\002 \001(\0132\017.KFMsg.PBObject:\0028\001\"h\n\030S2SInfor"
      "mBattleToGameReq\022\020\n\010playerid\030\001 \001(\004\022\016\n\006ro"
      "omid\030\002 \001(\004\022\020\n\010battleid\030\003 \001(\004\022\n\n\002ip\030\004 \001(\014"
      "\022\014\n\004port\030\005 \001(\r\"<\n\030S2SInformBattleToRoomA"
      "ck\022\020\n\010playerid\030\001 \001(\004\022\016\n\006roomid\030\002 \001(\004\"9\n\025"
      "S2SQueryRoomToRoomReq\022\020\n\010playerid\030\001 \001(\004\022"
      "\016\n\006roomid\030\002 \001(\004\")\n\025S2SQueryRoomToGameAck"
      "\022\020\n\010playerid\030\001 \001(\004\":\n\026S2SFinishRoomToGam"
      "eReq\022\020\n\010playerid\030\001 \001(\004\022\016\n\006roomid\030\002 \001(\004\"<"
      "\n\027S2SQueryMatchToMatchReq\022\020\n\010playerid\030\001 "
      "\001(\004\022\017\n\007matchid\030\002 \001(\r\"*\n\026S2SQueryMatchToG"
      "ameAck\022\020\n\010playerid\030\001 \001(\004*\245\006\n\016ServerProto"
      "col\022\035\n\031S2S_SERVER_PROTOCOL_BEGIN\020\000\022\"\n\034S2"
      "S_START_MATCH_TO_SHARD_REQ\020\231\362\001\022!\n\033S2S_ST"
      "ART_MATCH_TO_GAME_ACK\020\232\362\001\022#\n\035S2S_CANCEL_"
      "MATCH_TO_SHARD_REQ\020\233\362\001\022&\n S2S_AFFIRM_MAT"
      "CH_TIMEOUT_TO_GAME\020\234\362\001\022#\n\035S2S_AFFIRM_MAT"
      "CH_TO_SHARD_REQ\020\235\362\001\022%\n\037S2S_REGISTER_BATT"
      "LE_TO_ROOM_REQ\020\375\362\001\022\'\n!S2S_REGISTER_BATTL"
      "E_TO_BATTLE_ACK\020\376\362\001\022!\n\033S2S_OPEN_ROOM_TO_"
      "BATTLE_REQ\020\377\362\001\022\037\n\031S2S_OPEN_ROOM_TO_ROOM_"
      "ACK\020\200\363\001\022!\n\033S2S_FINISH_ROOM_TO_ROOM_REQ\020\201"
      "\363\001\022#\n\035S2S_FINISH_ROOM_TO_BATTLE_ACK\020\202\363\001\022"
      " \n\032S2S_HEART_BEAT_TO_ROOM_REQ\020\203\363\001\022!\n\033S2S"
      "_CREATE_ROOM_TO_ROOM_REQ\020\341\363\001\022\"\n\034S2S_CREA"
      "TE_ROOM_TO_MATCH_ACK\020\342\363\001\022#\n\035S2S_INFORM_B"
      "ATTLE_TO_GAME_REQ\020\343\363\001\022#\n\035S2S_INFORM_BATT"
      "LE_TO_ROOM_ACK\020\344\363\001\022 \n\032S2S_QUERY_ROOM_TO_"
      "ROOM_REQ\020\345\363\001\022 \n\032S2S_QUERY_ROOM_TO_GAME_A"
      "CK\020\346\363\001\022!\n\033S2S_FINISH_ROOM_TO_GAME_REQ\020\347\363"
      "\001\022\"\n\034S2S_QUERY_MATCH_TO_MATCH_REQ\020\350\363\001\022!\n"
      "\033S2S_QUERY_MATCH_TO_GAME_ACK\020\351\363\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerMessage.proto", &protobuf_RegisterTypes);
  ::protobuf_DefineMessage_2eproto::AddDescriptors();
  ::protobuf_FrameDefineMessage_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ServerMessage_2eproto
namespace KFMsg {
const ::google::protobuf::EnumDescriptor* ServerProtocol_descriptor() {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ServerMessage_2eproto::file_level_enum_descriptors[0];
}
bool ServerProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 31001:
    case 31002:
    case 31003:
    case 31004:
    case 31005:
    case 31101:
    case 31102:
    case 31103:
    case 31104:
    case 31105:
    case 31106:
    case 31107:
    case 31201:
    case 31202:
    case 31203:
    case 31204:
    case 31205:
    case 31206:
    case 31207:
    case 31208:
    case 31209:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void S2SRegisterBattleToRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SRegisterBattleToRoomReq::kServeridFieldNumber;
const int S2SRegisterBattleToRoomReq::kVersionFieldNumber;
const int S2SRegisterBattleToRoomReq::kIpFieldNumber;
const int S2SRegisterBattleToRoomReq::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SRegisterBattleToRoomReq::S2SRegisterBattleToRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SRegisterBattleToRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SRegisterBattleToRoomReq)
}
S2SRegisterBattleToRoomReq::S2SRegisterBattleToRoomReq(const S2SRegisterBattleToRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SRegisterBattleToRoomReq)
}

void S2SRegisterBattleToRoomReq::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(port_));
}

S2SRegisterBattleToRoomReq::~S2SRegisterBattleToRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SRegisterBattleToRoomReq)
  SharedDtor();
}

void S2SRegisterBattleToRoomReq::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2SRegisterBattleToRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SRegisterBattleToRoomReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SRegisterBattleToRoomReq& S2SRegisterBattleToRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SRegisterBattleToRoomReq.base);
  return *internal_default_instance();
}


void S2SRegisterBattleToRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SRegisterBattleToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool S2SRegisterBattleToRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SRegisterBattleToRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 serverid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SRegisterBattleToRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SRegisterBattleToRoomReq)
  return false;
#undef DO_
}

void S2SRegisterBattleToRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SRegisterBattleToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serverid = 1;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // bytes version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->version(), output);
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ip(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SRegisterBattleToRoomReq)
}

::google::protobuf::uint8* S2SRegisterBattleToRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SRegisterBattleToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serverid = 1;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // bytes version = 2;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->version(), target);
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SRegisterBattleToRoomReq)
  return target;
}

size_t S2SRegisterBattleToRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SRegisterBattleToRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // uint64 serverid = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SRegisterBattleToRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SRegisterBattleToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SRegisterBattleToRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SRegisterBattleToRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SRegisterBattleToRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SRegisterBattleToRoomReq)
    MergeFrom(*source);
  }
}

void S2SRegisterBattleToRoomReq::MergeFrom(const S2SRegisterBattleToRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SRegisterBattleToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void S2SRegisterBattleToRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SRegisterBattleToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterBattleToRoomReq::CopyFrom(const S2SRegisterBattleToRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SRegisterBattleToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterBattleToRoomReq::IsInitialized() const {
  return true;
}

void S2SRegisterBattleToRoomReq::Swap(S2SRegisterBattleToRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SRegisterBattleToRoomReq::InternalSwap(S2SRegisterBattleToRoomReq* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serverid_, other->serverid_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SRegisterBattleToRoomReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SRegisterBattleToBattleAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SRegisterBattleToBattleAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SRegisterBattleToBattleAck::S2SRegisterBattleToBattleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SRegisterBattleToBattleAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SRegisterBattleToBattleAck)
}
S2SRegisterBattleToBattleAck::S2SRegisterBattleToBattleAck(const S2SRegisterBattleToBattleAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SRegisterBattleToBattleAck)
}

void S2SRegisterBattleToBattleAck::SharedCtor() {
  result_ = false;
}

S2SRegisterBattleToBattleAck::~S2SRegisterBattleToBattleAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SRegisterBattleToBattleAck)
  SharedDtor();
}

void S2SRegisterBattleToBattleAck::SharedDtor() {
}

void S2SRegisterBattleToBattleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SRegisterBattleToBattleAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SRegisterBattleToBattleAck& S2SRegisterBattleToBattleAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SRegisterBattleToBattleAck.base);
  return *internal_default_instance();
}


void S2SRegisterBattleToBattleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SRegisterBattleToBattleAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

bool S2SRegisterBattleToBattleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SRegisterBattleToBattleAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SRegisterBattleToBattleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SRegisterBattleToBattleAck)
  return false;
#undef DO_
}

void S2SRegisterBattleToBattleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SRegisterBattleToBattleAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SRegisterBattleToBattleAck)
}

::google::protobuf::uint8* S2SRegisterBattleToBattleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SRegisterBattleToBattleAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SRegisterBattleToBattleAck)
  return target;
}

size_t S2SRegisterBattleToBattleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SRegisterBattleToBattleAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SRegisterBattleToBattleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SRegisterBattleToBattleAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SRegisterBattleToBattleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SRegisterBattleToBattleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SRegisterBattleToBattleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SRegisterBattleToBattleAck)
    MergeFrom(*source);
  }
}

void S2SRegisterBattleToBattleAck::MergeFrom(const S2SRegisterBattleToBattleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SRegisterBattleToBattleAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void S2SRegisterBattleToBattleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SRegisterBattleToBattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterBattleToBattleAck::CopyFrom(const S2SRegisterBattleToBattleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SRegisterBattleToBattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterBattleToBattleAck::IsInitialized() const {
  return true;
}

void S2SRegisterBattleToBattleAck::Swap(S2SRegisterBattleToBattleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SRegisterBattleToBattleAck::InternalSwap(S2SRegisterBattleToBattleAck* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SRegisterBattleToBattleAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SOpenRoomToBattleReq::InitAsDefaultInstance() {
}
void S2SOpenRoomToBattleReq::clear_pbplayer() {
  pbplayer_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SOpenRoomToBattleReq::kRoomidFieldNumber;
const int S2SOpenRoomToBattleReq::kMatchidFieldNumber;
const int S2SOpenRoomToBattleReq::kRoomserveridFieldNumber;
const int S2SOpenRoomToBattleReq::kPbplayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SOpenRoomToBattleReq::S2SOpenRoomToBattleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SOpenRoomToBattleReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SOpenRoomToBattleReq)
}
S2SOpenRoomToBattleReq::S2SOpenRoomToBattleReq(const S2SOpenRoomToBattleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pbplayer_(from.pbplayer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SOpenRoomToBattleReq)
}

void S2SOpenRoomToBattleReq::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
}

S2SOpenRoomToBattleReq::~S2SOpenRoomToBattleReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SOpenRoomToBattleReq)
  SharedDtor();
}

void S2SOpenRoomToBattleReq::SharedDtor() {
}

void S2SOpenRoomToBattleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SOpenRoomToBattleReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SOpenRoomToBattleReq& S2SOpenRoomToBattleReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SOpenRoomToBattleReq.base);
  return *internal_default_instance();
}


void S2SOpenRoomToBattleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SOpenRoomToBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbplayer_.Clear();
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SOpenRoomToBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SOpenRoomToBattleReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomserverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KFMsg.PBMatchPlayer pbplayer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pbplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SOpenRoomToBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SOpenRoomToBattleReq)
  return false;
#undef DO_
}

void S2SOpenRoomToBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SOpenRoomToBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // uint64 roomserverid = 3;
  if (this->roomserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomserverid(), output);
  }

  // repeated .KFMsg.PBMatchPlayer pbplayer = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pbplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->pbplayer(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SOpenRoomToBattleReq)
}

::google::protobuf::uint8* S2SOpenRoomToBattleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SOpenRoomToBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // uint64 roomserverid = 3;
  if (this->roomserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomserverid(), target);
  }

  // repeated .KFMsg.PBMatchPlayer pbplayer = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pbplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->pbplayer(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SOpenRoomToBattleReq)
  return target;
}

size_t S2SOpenRoomToBattleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SOpenRoomToBattleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .KFMsg.PBMatchPlayer pbplayer = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->pbplayer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pbplayer(static_cast<int>(i)));
    }
  }

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 roomserverid = 3;
  if (this->roomserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomserverid());
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SOpenRoomToBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SOpenRoomToBattleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SOpenRoomToBattleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SOpenRoomToBattleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SOpenRoomToBattleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SOpenRoomToBattleReq)
    MergeFrom(*source);
  }
}

void S2SOpenRoomToBattleReq::MergeFrom(const S2SOpenRoomToBattleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SOpenRoomToBattleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pbplayer_.MergeFrom(from.pbplayer_);
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.roomserverid() != 0) {
    set_roomserverid(from.roomserverid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SOpenRoomToBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SOpenRoomToBattleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOpenRoomToBattleReq::CopyFrom(const S2SOpenRoomToBattleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SOpenRoomToBattleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOpenRoomToBattleReq::IsInitialized() const {
  return true;
}

void S2SOpenRoomToBattleReq::Swap(S2SOpenRoomToBattleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SOpenRoomToBattleReq::InternalSwap(S2SOpenRoomToBattleReq* other) {
  using std::swap;
  CastToBase(&pbplayer_)->InternalSwap(CastToBase(&other->pbplayer_));
  swap(roomid_, other->roomid_);
  swap(roomserverid_, other->roomserverid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SOpenRoomToBattleReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SOpenRoomToRoomAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SOpenRoomToRoomAck::kRoomidFieldNumber;
const int S2SOpenRoomToRoomAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SOpenRoomToRoomAck::S2SOpenRoomToRoomAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SOpenRoomToRoomAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SOpenRoomToRoomAck)
}
S2SOpenRoomToRoomAck::S2SOpenRoomToRoomAck(const S2SOpenRoomToRoomAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SOpenRoomToRoomAck)
}

void S2SOpenRoomToRoomAck::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(result_));
}

S2SOpenRoomToRoomAck::~S2SOpenRoomToRoomAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SOpenRoomToRoomAck)
  SharedDtor();
}

void S2SOpenRoomToRoomAck::SharedDtor() {
}

void S2SOpenRoomToRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SOpenRoomToRoomAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SOpenRoomToRoomAck& S2SOpenRoomToRoomAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SOpenRoomToRoomAck.base);
  return *internal_default_instance();
}


void S2SOpenRoomToRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SOpenRoomToRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

bool S2SOpenRoomToRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SOpenRoomToRoomAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SOpenRoomToRoomAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SOpenRoomToRoomAck)
  return false;
#undef DO_
}

void S2SOpenRoomToRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SOpenRoomToRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // bool result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SOpenRoomToRoomAck)
}

::google::protobuf::uint8* S2SOpenRoomToRoomAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SOpenRoomToRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // bool result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SOpenRoomToRoomAck)
  return target;
}

size_t S2SOpenRoomToRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SOpenRoomToRoomAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SOpenRoomToRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SOpenRoomToRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SOpenRoomToRoomAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SOpenRoomToRoomAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SOpenRoomToRoomAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SOpenRoomToRoomAck)
    MergeFrom(*source);
  }
}

void S2SOpenRoomToRoomAck::MergeFrom(const S2SOpenRoomToRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SOpenRoomToRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void S2SOpenRoomToRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SOpenRoomToRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOpenRoomToRoomAck::CopyFrom(const S2SOpenRoomToRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SOpenRoomToRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOpenRoomToRoomAck::IsInitialized() const {
  return true;
}

void S2SOpenRoomToRoomAck::Swap(S2SOpenRoomToRoomAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SOpenRoomToRoomAck::InternalSwap(S2SOpenRoomToRoomAck* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SOpenRoomToRoomAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SFinishRoomToRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SFinishRoomToRoomReq::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SFinishRoomToRoomReq::S2SFinishRoomToRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SFinishRoomToRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SFinishRoomToRoomReq)
}
S2SFinishRoomToRoomReq::S2SFinishRoomToRoomReq(const S2SFinishRoomToRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SFinishRoomToRoomReq)
}

void S2SFinishRoomToRoomReq::SharedCtor() {
  roomid_ = GOOGLE_ULONGLONG(0);
}

S2SFinishRoomToRoomReq::~S2SFinishRoomToRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SFinishRoomToRoomReq)
  SharedDtor();
}

void S2SFinishRoomToRoomReq::SharedDtor() {
}

void S2SFinishRoomToRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SFinishRoomToRoomReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SFinishRoomToRoomReq& S2SFinishRoomToRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SFinishRoomToRoomReq.base);
  return *internal_default_instance();
}


void S2SFinishRoomToRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SFinishRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SFinishRoomToRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SFinishRoomToRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SFinishRoomToRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SFinishRoomToRoomReq)
  return false;
#undef DO_
}

void S2SFinishRoomToRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SFinishRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SFinishRoomToRoomReq)
}

::google::protobuf::uint8* S2SFinishRoomToRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SFinishRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SFinishRoomToRoomReq)
  return target;
}

size_t S2SFinishRoomToRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SFinishRoomToRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SFinishRoomToRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SFinishRoomToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SFinishRoomToRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SFinishRoomToRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SFinishRoomToRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SFinishRoomToRoomReq)
    MergeFrom(*source);
  }
}

void S2SFinishRoomToRoomReq::MergeFrom(const S2SFinishRoomToRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SFinishRoomToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void S2SFinishRoomToRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SFinishRoomToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SFinishRoomToRoomReq::CopyFrom(const S2SFinishRoomToRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SFinishRoomToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SFinishRoomToRoomReq::IsInitialized() const {
  return true;
}

void S2SFinishRoomToRoomReq::Swap(S2SFinishRoomToRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SFinishRoomToRoomReq::InternalSwap(S2SFinishRoomToRoomReq* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SFinishRoomToRoomReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SFinishRoomToBattleAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SFinishRoomToBattleAck::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SFinishRoomToBattleAck::S2SFinishRoomToBattleAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SFinishRoomToBattleAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SFinishRoomToBattleAck)
}
S2SFinishRoomToBattleAck::S2SFinishRoomToBattleAck(const S2SFinishRoomToBattleAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SFinishRoomToBattleAck)
}

void S2SFinishRoomToBattleAck::SharedCtor() {
  roomid_ = GOOGLE_ULONGLONG(0);
}

S2SFinishRoomToBattleAck::~S2SFinishRoomToBattleAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SFinishRoomToBattleAck)
  SharedDtor();
}

void S2SFinishRoomToBattleAck::SharedDtor() {
}

void S2SFinishRoomToBattleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SFinishRoomToBattleAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SFinishRoomToBattleAck& S2SFinishRoomToBattleAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SFinishRoomToBattleAck.base);
  return *internal_default_instance();
}


void S2SFinishRoomToBattleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SFinishRoomToBattleAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SFinishRoomToBattleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SFinishRoomToBattleAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SFinishRoomToBattleAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SFinishRoomToBattleAck)
  return false;
#undef DO_
}

void S2SFinishRoomToBattleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SFinishRoomToBattleAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SFinishRoomToBattleAck)
}

::google::protobuf::uint8* S2SFinishRoomToBattleAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SFinishRoomToBattleAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SFinishRoomToBattleAck)
  return target;
}

size_t S2SFinishRoomToBattleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SFinishRoomToBattleAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SFinishRoomToBattleAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SFinishRoomToBattleAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SFinishRoomToBattleAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SFinishRoomToBattleAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SFinishRoomToBattleAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SFinishRoomToBattleAck)
    MergeFrom(*source);
  }
}

void S2SFinishRoomToBattleAck::MergeFrom(const S2SFinishRoomToBattleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SFinishRoomToBattleAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void S2SFinishRoomToBattleAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SFinishRoomToBattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SFinishRoomToBattleAck::CopyFrom(const S2SFinishRoomToBattleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SFinishRoomToBattleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SFinishRoomToBattleAck::IsInitialized() const {
  return true;
}

void S2SFinishRoomToBattleAck::Swap(S2SFinishRoomToBattleAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SFinishRoomToBattleAck::InternalSwap(S2SFinishRoomToBattleAck* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SFinishRoomToBattleAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SHeartBeatToRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SHeartBeatToRoomReq::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SHeartBeatToRoomReq::S2SHeartBeatToRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SHeartBeatToRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SHeartBeatToRoomReq)
}
S2SHeartBeatToRoomReq::S2SHeartBeatToRoomReq(const S2SHeartBeatToRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SHeartBeatToRoomReq)
}

void S2SHeartBeatToRoomReq::SharedCtor() {
  roomid_ = GOOGLE_ULONGLONG(0);
}

S2SHeartBeatToRoomReq::~S2SHeartBeatToRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SHeartBeatToRoomReq)
  SharedDtor();
}

void S2SHeartBeatToRoomReq::SharedDtor() {
}

void S2SHeartBeatToRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SHeartBeatToRoomReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SHeartBeatToRoomReq& S2SHeartBeatToRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SHeartBeatToRoomReq.base);
  return *internal_default_instance();
}


void S2SHeartBeatToRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SHeartBeatToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SHeartBeatToRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SHeartBeatToRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SHeartBeatToRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SHeartBeatToRoomReq)
  return false;
#undef DO_
}

void S2SHeartBeatToRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SHeartBeatToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SHeartBeatToRoomReq)
}

::google::protobuf::uint8* S2SHeartBeatToRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SHeartBeatToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SHeartBeatToRoomReq)
  return target;
}

size_t S2SHeartBeatToRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SHeartBeatToRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SHeartBeatToRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SHeartBeatToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SHeartBeatToRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SHeartBeatToRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SHeartBeatToRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SHeartBeatToRoomReq)
    MergeFrom(*source);
  }
}

void S2SHeartBeatToRoomReq::MergeFrom(const S2SHeartBeatToRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SHeartBeatToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void S2SHeartBeatToRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SHeartBeatToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SHeartBeatToRoomReq::CopyFrom(const S2SHeartBeatToRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SHeartBeatToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SHeartBeatToRoomReq::IsInitialized() const {
  return true;
}

void S2SHeartBeatToRoomReq::Swap(S2SHeartBeatToRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SHeartBeatToRoomReq::InternalSwap(S2SHeartBeatToRoomReq* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SHeartBeatToRoomReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SStartMatchToShardReq::InitAsDefaultInstance() {
  ::KFMsg::_S2SStartMatchToShardReq_default_instance_._instance.get_mutable()->pbplayer_ = const_cast< ::KFMsg::PBMatchPlayer*>(
      ::KFMsg::PBMatchPlayer::internal_default_instance());
}
void S2SStartMatchToShardReq::clear_pbplayer() {
  if (GetArenaNoVirtual() == NULL && pbplayer_ != NULL) {
    delete pbplayer_;
  }
  pbplayer_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SStartMatchToShardReq::kVersionFieldNumber;
const int S2SStartMatchToShardReq::kMatchidFieldNumber;
const int S2SStartMatchToShardReq::kServeridFieldNumber;
const int S2SStartMatchToShardReq::kPbplayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SStartMatchToShardReq::S2SStartMatchToShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SStartMatchToShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SStartMatchToShardReq)
}
S2SStartMatchToShardReq::S2SStartMatchToShardReq(const S2SStartMatchToShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_pbplayer()) {
    pbplayer_ = new ::KFMsg::PBMatchPlayer(*from.pbplayer_);
  } else {
    pbplayer_ = NULL;
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SStartMatchToShardReq)
}

void S2SStartMatchToShardReq::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pbplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&pbplayer_)) + sizeof(matchid_));
}

S2SStartMatchToShardReq::~S2SStartMatchToShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SStartMatchToShardReq)
  SharedDtor();
}

void S2SStartMatchToShardReq::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pbplayer_;
}

void S2SStartMatchToShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SStartMatchToShardReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SStartMatchToShardReq& S2SStartMatchToShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SStartMatchToShardReq.base);
  return *internal_default_instance();
}


void S2SStartMatchToShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SStartMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pbplayer_ != NULL) {
    delete pbplayer_;
  }
  pbplayer_ = NULL;
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SStartMatchToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SStartMatchToShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .KFMsg.PBMatchPlayer pbplayer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SStartMatchToShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SStartMatchToShardReq)
  return false;
#undef DO_
}

void S2SStartMatchToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SStartMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  // .KFMsg.PBMatchPlayer pbplayer = 4;
  if (this->has_pbplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pbplayer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SStartMatchToShardReq)
}

::google::protobuf::uint8* S2SStartMatchToShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SStartMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  // .KFMsg.PBMatchPlayer pbplayer = 4;
  if (this->has_pbplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pbplayer(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SStartMatchToShardReq)
  return target;
}

size_t S2SStartMatchToShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SStartMatchToShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  // .KFMsg.PBMatchPlayer pbplayer = 4;
  if (this->has_pbplayer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbplayer_);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SStartMatchToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SStartMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SStartMatchToShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SStartMatchToShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SStartMatchToShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SStartMatchToShardReq)
    MergeFrom(*source);
  }
}

void S2SStartMatchToShardReq::MergeFrom(const S2SStartMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SStartMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_pbplayer()) {
    mutable_pbplayer()->::KFMsg::PBMatchPlayer::MergeFrom(from.pbplayer());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SStartMatchToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SStartMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SStartMatchToShardReq::CopyFrom(const S2SStartMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SStartMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SStartMatchToShardReq::IsInitialized() const {
  return true;
}

void S2SStartMatchToShardReq::Swap(S2SStartMatchToShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SStartMatchToShardReq::InternalSwap(S2SStartMatchToShardReq* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pbplayer_, other->pbplayer_);
  swap(serverid_, other->serverid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SStartMatchToShardReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SStartMatchToGameAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SStartMatchToGameAck::kResultFieldNumber;
const int S2SStartMatchToGameAck::kMatchidFieldNumber;
const int S2SStartMatchToGameAck::kPlayeridFieldNumber;
const int S2SStartMatchToGameAck::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SStartMatchToGameAck::S2SStartMatchToGameAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SStartMatchToGameAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SStartMatchToGameAck)
}
S2SStartMatchToGameAck::S2SStartMatchToGameAck(const S2SStartMatchToGameAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SStartMatchToGameAck)
}

void S2SStartMatchToGameAck::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(serverid_));
}

S2SStartMatchToGameAck::~S2SStartMatchToGameAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SStartMatchToGameAck)
  SharedDtor();
}

void S2SStartMatchToGameAck::SharedDtor() {
}

void S2SStartMatchToGameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SStartMatchToGameAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SStartMatchToGameAck& S2SStartMatchToGameAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SStartMatchToGameAck.base);
  return *internal_default_instance();
}


void S2SStartMatchToGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SStartMatchToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(serverid_));
  _internal_metadata_.Clear();
}

bool S2SStartMatchToGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SStartMatchToGameAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SStartMatchToGameAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SStartMatchToGameAck)
  return false;
#undef DO_
}

void S2SStartMatchToGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SStartMatchToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SStartMatchToGameAck)
}

::google::protobuf::uint8* S2SStartMatchToGameAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SStartMatchToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SStartMatchToGameAck)
  return target;
}

size_t S2SStartMatchToGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SStartMatchToGameAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SStartMatchToGameAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SStartMatchToGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SStartMatchToGameAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SStartMatchToGameAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SStartMatchToGameAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SStartMatchToGameAck)
    MergeFrom(*source);
  }
}

void S2SStartMatchToGameAck::MergeFrom(const S2SStartMatchToGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SStartMatchToGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void S2SStartMatchToGameAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SStartMatchToGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SStartMatchToGameAck::CopyFrom(const S2SStartMatchToGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SStartMatchToGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SStartMatchToGameAck::IsInitialized() const {
  return true;
}

void S2SStartMatchToGameAck::Swap(S2SStartMatchToGameAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SStartMatchToGameAck::InternalSwap(S2SStartMatchToGameAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(matchid_, other->matchid_);
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SStartMatchToGameAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SCancelMatchToShardReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SCancelMatchToShardReq::kMatchidFieldNumber;
const int S2SCancelMatchToShardReq::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SCancelMatchToShardReq::S2SCancelMatchToShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SCancelMatchToShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SCancelMatchToShardReq)
}
S2SCancelMatchToShardReq::S2SCancelMatchToShardReq(const S2SCancelMatchToShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SCancelMatchToShardReq)
}

void S2SCancelMatchToShardReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SCancelMatchToShardReq::~S2SCancelMatchToShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SCancelMatchToShardReq)
  SharedDtor();
}

void S2SCancelMatchToShardReq::SharedDtor() {
}

void S2SCancelMatchToShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SCancelMatchToShardReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SCancelMatchToShardReq& S2SCancelMatchToShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SCancelMatchToShardReq.base);
  return *internal_default_instance();
}


void S2SCancelMatchToShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SCancelMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SCancelMatchToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SCancelMatchToShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SCancelMatchToShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SCancelMatchToShardReq)
  return false;
#undef DO_
}

void S2SCancelMatchToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SCancelMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SCancelMatchToShardReq)
}

::google::protobuf::uint8* S2SCancelMatchToShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SCancelMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SCancelMatchToShardReq)
  return target;
}

size_t S2SCancelMatchToShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SCancelMatchToShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SCancelMatchToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SCancelMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SCancelMatchToShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SCancelMatchToShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SCancelMatchToShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SCancelMatchToShardReq)
    MergeFrom(*source);
  }
}

void S2SCancelMatchToShardReq::MergeFrom(const S2SCancelMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SCancelMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SCancelMatchToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SCancelMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCancelMatchToShardReq::CopyFrom(const S2SCancelMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SCancelMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCancelMatchToShardReq::IsInitialized() const {
  return true;
}

void S2SCancelMatchToShardReq::Swap(S2SCancelMatchToShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SCancelMatchToShardReq::InternalSwap(S2SCancelMatchToShardReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SCancelMatchToShardReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SCreateRoomToRoomReq::InitAsDefaultInstance() {
}
void S2SCreateRoomToRoomReq::clear_pbplayer() {
  pbplayer_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SCreateRoomToRoomReq::kMatchidFieldNumber;
const int S2SCreateRoomToRoomReq::kRoomidFieldNumber;
const int S2SCreateRoomToRoomReq::kVersionFieldNumber;
const int S2SCreateRoomToRoomReq::kServeridFieldNumber;
const int S2SCreateRoomToRoomReq::kPbplayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SCreateRoomToRoomReq::S2SCreateRoomToRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SCreateRoomToRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SCreateRoomToRoomReq)
}
S2SCreateRoomToRoomReq::S2SCreateRoomToRoomReq(const S2SCreateRoomToRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pbplayer_(from.pbplayer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SCreateRoomToRoomReq)
}

void S2SCreateRoomToRoomReq::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
}

S2SCreateRoomToRoomReq::~S2SCreateRoomToRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SCreateRoomToRoomReq)
  SharedDtor();
}

void S2SCreateRoomToRoomReq::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2SCreateRoomToRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SCreateRoomToRoomReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SCreateRoomToRoomReq& S2SCreateRoomToRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SCreateRoomToRoomReq.base);
  return *internal_default_instance();
}


void S2SCreateRoomToRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SCreateRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbplayer_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SCreateRoomToRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SCreateRoomToRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KFMsg.PBMatchPlayer pbplayer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pbplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SCreateRoomToRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SCreateRoomToRoomReq)
  return false;
#undef DO_
}

void S2SCreateRoomToRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SCreateRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // bytes version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->version(), output);
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->serverid(), output);
  }

  // repeated .KFMsg.PBMatchPlayer pbplayer = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pbplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->pbplayer(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SCreateRoomToRoomReq)
}

::google::protobuf::uint8* S2SCreateRoomToRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SCreateRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // bytes version = 3;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->version(), target);
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->serverid(), target);
  }

  // repeated .KFMsg.PBMatchPlayer pbplayer = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pbplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->pbplayer(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SCreateRoomToRoomReq)
  return target;
}

size_t S2SCreateRoomToRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SCreateRoomToRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .KFMsg.PBMatchPlayer pbplayer = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pbplayer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pbplayer(static_cast<int>(i)));
    }
  }

  // bytes version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SCreateRoomToRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SCreateRoomToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SCreateRoomToRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SCreateRoomToRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SCreateRoomToRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SCreateRoomToRoomReq)
    MergeFrom(*source);
  }
}

void S2SCreateRoomToRoomReq::MergeFrom(const S2SCreateRoomToRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SCreateRoomToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pbplayer_.MergeFrom(from.pbplayer_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SCreateRoomToRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SCreateRoomToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateRoomToRoomReq::CopyFrom(const S2SCreateRoomToRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SCreateRoomToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateRoomToRoomReq::IsInitialized() const {
  return true;
}

void S2SCreateRoomToRoomReq::Swap(S2SCreateRoomToRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SCreateRoomToRoomReq::InternalSwap(S2SCreateRoomToRoomReq* other) {
  using std::swap;
  CastToBase(&pbplayer_)->InternalSwap(CastToBase(&other->pbplayer_));
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roomid_, other->roomid_);
  swap(serverid_, other->serverid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SCreateRoomToRoomReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SCreateRoomToMatchAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SCreateRoomToMatchAck::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SCreateRoomToMatchAck::S2SCreateRoomToMatchAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SCreateRoomToMatchAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SCreateRoomToMatchAck)
}
S2SCreateRoomToMatchAck::S2SCreateRoomToMatchAck(const S2SCreateRoomToMatchAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SCreateRoomToMatchAck)
}

void S2SCreateRoomToMatchAck::SharedCtor() {
  roomid_ = GOOGLE_ULONGLONG(0);
}

S2SCreateRoomToMatchAck::~S2SCreateRoomToMatchAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SCreateRoomToMatchAck)
  SharedDtor();
}

void S2SCreateRoomToMatchAck::SharedDtor() {
}

void S2SCreateRoomToMatchAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SCreateRoomToMatchAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SCreateRoomToMatchAck& S2SCreateRoomToMatchAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SCreateRoomToMatchAck.base);
  return *internal_default_instance();
}


void S2SCreateRoomToMatchAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SCreateRoomToMatchAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SCreateRoomToMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SCreateRoomToMatchAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SCreateRoomToMatchAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SCreateRoomToMatchAck)
  return false;
#undef DO_
}

void S2SCreateRoomToMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SCreateRoomToMatchAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SCreateRoomToMatchAck)
}

::google::protobuf::uint8* S2SCreateRoomToMatchAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SCreateRoomToMatchAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SCreateRoomToMatchAck)
  return target;
}

size_t S2SCreateRoomToMatchAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SCreateRoomToMatchAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SCreateRoomToMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SCreateRoomToMatchAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SCreateRoomToMatchAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SCreateRoomToMatchAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SCreateRoomToMatchAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SCreateRoomToMatchAck)
    MergeFrom(*source);
  }
}

void S2SCreateRoomToMatchAck::MergeFrom(const S2SCreateRoomToMatchAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SCreateRoomToMatchAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void S2SCreateRoomToMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SCreateRoomToMatchAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateRoomToMatchAck::CopyFrom(const S2SCreateRoomToMatchAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SCreateRoomToMatchAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateRoomToMatchAck::IsInitialized() const {
  return true;
}

void S2SCreateRoomToMatchAck::Swap(S2SCreateRoomToMatchAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SCreateRoomToMatchAck::InternalSwap(S2SCreateRoomToMatchAck* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SCreateRoomToMatchAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SAffirmMatchTimeoutToGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SAffirmMatchTimeoutToGame::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SAffirmMatchTimeoutToGame::S2SAffirmMatchTimeoutToGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SAffirmMatchTimeoutToGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SAffirmMatchTimeoutToGame)
}
S2SAffirmMatchTimeoutToGame::S2SAffirmMatchTimeoutToGame(const S2SAffirmMatchTimeoutToGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SAffirmMatchTimeoutToGame)
}

void S2SAffirmMatchTimeoutToGame::SharedCtor() {
  playerid_ = GOOGLE_ULONGLONG(0);
}

S2SAffirmMatchTimeoutToGame::~S2SAffirmMatchTimeoutToGame() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SAffirmMatchTimeoutToGame)
  SharedDtor();
}

void S2SAffirmMatchTimeoutToGame::SharedDtor() {
}

void S2SAffirmMatchTimeoutToGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SAffirmMatchTimeoutToGame::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SAffirmMatchTimeoutToGame& S2SAffirmMatchTimeoutToGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SAffirmMatchTimeoutToGame.base);
  return *internal_default_instance();
}


void S2SAffirmMatchTimeoutToGame::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SAffirmMatchTimeoutToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SAffirmMatchTimeoutToGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SAffirmMatchTimeoutToGame)
  return false;
#undef DO_
}

void S2SAffirmMatchTimeoutToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SAffirmMatchTimeoutToGame)
}

::google::protobuf::uint8* S2SAffirmMatchTimeoutToGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SAffirmMatchTimeoutToGame)
  return target;
}

size_t S2SAffirmMatchTimeoutToGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SAffirmMatchTimeoutToGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SAffirmMatchTimeoutToGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SAffirmMatchTimeoutToGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SAffirmMatchTimeoutToGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SAffirmMatchTimeoutToGame)
    MergeFrom(*source);
  }
}

void S2SAffirmMatchTimeoutToGame::MergeFrom(const S2SAffirmMatchTimeoutToGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void S2SAffirmMatchTimeoutToGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAffirmMatchTimeoutToGame::CopyFrom(const S2SAffirmMatchTimeoutToGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SAffirmMatchTimeoutToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAffirmMatchTimeoutToGame::IsInitialized() const {
  return true;
}

void S2SAffirmMatchTimeoutToGame::Swap(S2SAffirmMatchTimeoutToGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SAffirmMatchTimeoutToGame::InternalSwap(S2SAffirmMatchTimeoutToGame* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SAffirmMatchTimeoutToGame::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

S2SAffirmMatchToShardReq_HeroEntry_DoNotUse::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse() {}
S2SAffirmMatchToShardReq_HeroEntry_DoNotUse::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void S2SAffirmMatchToShardReq_HeroEntry_DoNotUse::MergeFrom(const S2SAffirmMatchToShardReq_HeroEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata S2SAffirmMatchToShardReq_HeroEntry_DoNotUse::GetMetadata() const {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[13];
}
void S2SAffirmMatchToShardReq_HeroEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void S2SAffirmMatchToShardReq::InitAsDefaultInstance() {
}
void S2SAffirmMatchToShardReq::clear_hero() {
  hero_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SAffirmMatchToShardReq::kPlayeridFieldNumber;
const int S2SAffirmMatchToShardReq::kHeroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SAffirmMatchToShardReq::S2SAffirmMatchToShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SAffirmMatchToShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SAffirmMatchToShardReq)
}
S2SAffirmMatchToShardReq::S2SAffirmMatchToShardReq(const S2SAffirmMatchToShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_.MergeFrom(from.hero_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SAffirmMatchToShardReq)
}

void S2SAffirmMatchToShardReq::SharedCtor() {
  playerid_ = GOOGLE_ULONGLONG(0);
}

S2SAffirmMatchToShardReq::~S2SAffirmMatchToShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SAffirmMatchToShardReq)
  SharedDtor();
}

void S2SAffirmMatchToShardReq::SharedDtor() {
}

void S2SAffirmMatchToShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SAffirmMatchToShardReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SAffirmMatchToShardReq& S2SAffirmMatchToShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SAffirmMatchToShardReq.base);
  return *internal_default_instance();
}


void S2SAffirmMatchToShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SAffirmMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_.Clear();
  playerid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SAffirmMatchToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SAffirmMatchToShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .KFMsg.PBObject> hero = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          S2SAffirmMatchToShardReq_HeroEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              S2SAffirmMatchToShardReq_HeroEntry_DoNotUse,
              ::google::protobuf::uint64, ::KFMsg::PBObject,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject > > parser(&hero_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SAffirmMatchToShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SAffirmMatchToShardReq)
  return false;
#undef DO_
}

void S2SAffirmMatchToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SAffirmMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // map<uint64, .KFMsg.PBObject> hero = 2;
  if (!this->hero().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->hero().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->hero().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::const_iterator
          it = this->hero().begin();
          it != this->hero().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<S2SAffirmMatchToShardReq_HeroEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hero_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::std::unique_ptr<S2SAffirmMatchToShardReq_HeroEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::const_iterator
          it = this->hero().begin();
          it != this->hero().end(); ++it) {
        entry.reset(hero_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SAffirmMatchToShardReq)
}

::google::protobuf::uint8* S2SAffirmMatchToShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SAffirmMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // map<uint64, .KFMsg.PBObject> hero = 2;
  if (!this->hero().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->hero().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->hero().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::const_iterator
          it = this->hero().begin();
          it != this->hero().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<S2SAffirmMatchToShardReq_HeroEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hero_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<S2SAffirmMatchToShardReq_HeroEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::const_iterator
          it = this->hero().begin();
          it != this->hero().end(); ++it) {
        entry.reset(hero_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SAffirmMatchToShardReq)
  return target;
}

size_t S2SAffirmMatchToShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SAffirmMatchToShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .KFMsg.PBObject> hero = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hero_size());
  {
    ::std::unique_ptr<S2SAffirmMatchToShardReq_HeroEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::KFMsg::PBObject >::const_iterator
        it = this->hero().begin();
        it != this->hero().end(); ++it) {
      entry.reset(hero_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SAffirmMatchToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SAffirmMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SAffirmMatchToShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SAffirmMatchToShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SAffirmMatchToShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SAffirmMatchToShardReq)
    MergeFrom(*source);
  }
}

void S2SAffirmMatchToShardReq::MergeFrom(const S2SAffirmMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SAffirmMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_.MergeFrom(from.hero_);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void S2SAffirmMatchToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SAffirmMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAffirmMatchToShardReq::CopyFrom(const S2SAffirmMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SAffirmMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAffirmMatchToShardReq::IsInitialized() const {
  return true;
}

void S2SAffirmMatchToShardReq::Swap(S2SAffirmMatchToShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SAffirmMatchToShardReq::InternalSwap(S2SAffirmMatchToShardReq* other) {
  using std::swap;
  hero_.Swap(&other->hero_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SAffirmMatchToShardReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SInformBattleToGameReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SInformBattleToGameReq::kPlayeridFieldNumber;
const int S2SInformBattleToGameReq::kRoomidFieldNumber;
const int S2SInformBattleToGameReq::kBattleidFieldNumber;
const int S2SInformBattleToGameReq::kIpFieldNumber;
const int S2SInformBattleToGameReq::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SInformBattleToGameReq::S2SInformBattleToGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SInformBattleToGameReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SInformBattleToGameReq)
}
S2SInformBattleToGameReq::S2SInformBattleToGameReq(const S2SInformBattleToGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SInformBattleToGameReq)
}

void S2SInformBattleToGameReq::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(port_));
}

S2SInformBattleToGameReq::~S2SInformBattleToGameReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SInformBattleToGameReq)
  SharedDtor();
}

void S2SInformBattleToGameReq::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2SInformBattleToGameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SInformBattleToGameReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SInformBattleToGameReq& S2SInformBattleToGameReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SInformBattleToGameReq.base);
  return *internal_default_instance();
}


void S2SInformBattleToGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SInformBattleToGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool S2SInformBattleToGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SInformBattleToGameReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 battleid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SInformBattleToGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SInformBattleToGameReq)
  return false;
#undef DO_
}

void S2SInformBattleToGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SInformBattleToGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // uint64 battleid = 3;
  if (this->battleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleid(), output);
  }

  // bytes ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ip(), output);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SInformBattleToGameReq)
}

::google::protobuf::uint8* S2SInformBattleToGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SInformBattleToGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // uint64 battleid = 3;
  if (this->battleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleid(), target);
  }

  // bytes ip = 4;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SInformBattleToGameReq)
  return target;
}

size_t S2SInformBattleToGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SInformBattleToGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 battleid = 3;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleid());
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SInformBattleToGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SInformBattleToGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SInformBattleToGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SInformBattleToGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SInformBattleToGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SInformBattleToGameReq)
    MergeFrom(*source);
  }
}

void S2SInformBattleToGameReq::MergeFrom(const S2SInformBattleToGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SInformBattleToGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.battleid() != 0) {
    set_battleid(from.battleid());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void S2SInformBattleToGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SInformBattleToGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SInformBattleToGameReq::CopyFrom(const S2SInformBattleToGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SInformBattleToGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SInformBattleToGameReq::IsInitialized() const {
  return true;
}

void S2SInformBattleToGameReq::Swap(S2SInformBattleToGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SInformBattleToGameReq::InternalSwap(S2SInformBattleToGameReq* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerid_, other->playerid_);
  swap(roomid_, other->roomid_);
  swap(battleid_, other->battleid_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SInformBattleToGameReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SInformBattleToRoomAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SInformBattleToRoomAck::kPlayeridFieldNumber;
const int S2SInformBattleToRoomAck::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SInformBattleToRoomAck::S2SInformBattleToRoomAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SInformBattleToRoomAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SInformBattleToRoomAck)
}
S2SInformBattleToRoomAck::S2SInformBattleToRoomAck(const S2SInformBattleToRoomAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SInformBattleToRoomAck)
}

void S2SInformBattleToRoomAck::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
}

S2SInformBattleToRoomAck::~S2SInformBattleToRoomAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SInformBattleToRoomAck)
  SharedDtor();
}

void S2SInformBattleToRoomAck::SharedDtor() {
}

void S2SInformBattleToRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SInformBattleToRoomAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SInformBattleToRoomAck& S2SInformBattleToRoomAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SInformBattleToRoomAck.base);
  return *internal_default_instance();
}


void S2SInformBattleToRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SInformBattleToRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  _internal_metadata_.Clear();
}

bool S2SInformBattleToRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SInformBattleToRoomAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SInformBattleToRoomAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SInformBattleToRoomAck)
  return false;
#undef DO_
}

void S2SInformBattleToRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SInformBattleToRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SInformBattleToRoomAck)
}

::google::protobuf::uint8* S2SInformBattleToRoomAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SInformBattleToRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SInformBattleToRoomAck)
  return target;
}

size_t S2SInformBattleToRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SInformBattleToRoomAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SInformBattleToRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SInformBattleToRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SInformBattleToRoomAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SInformBattleToRoomAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SInformBattleToRoomAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SInformBattleToRoomAck)
    MergeFrom(*source);
  }
}

void S2SInformBattleToRoomAck::MergeFrom(const S2SInformBattleToRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SInformBattleToRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void S2SInformBattleToRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SInformBattleToRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SInformBattleToRoomAck::CopyFrom(const S2SInformBattleToRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SInformBattleToRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SInformBattleToRoomAck::IsInitialized() const {
  return true;
}

void S2SInformBattleToRoomAck::Swap(S2SInformBattleToRoomAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SInformBattleToRoomAck::InternalSwap(S2SInformBattleToRoomAck* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SInformBattleToRoomAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryRoomToRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryRoomToRoomReq::kPlayeridFieldNumber;
const int S2SQueryRoomToRoomReq::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryRoomToRoomReq::S2SQueryRoomToRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SQueryRoomToRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryRoomToRoomReq)
}
S2SQueryRoomToRoomReq::S2SQueryRoomToRoomReq(const S2SQueryRoomToRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryRoomToRoomReq)
}

void S2SQueryRoomToRoomReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
}

S2SQueryRoomToRoomReq::~S2SQueryRoomToRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryRoomToRoomReq)
  SharedDtor();
}

void S2SQueryRoomToRoomReq::SharedDtor() {
}

void S2SQueryRoomToRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryRoomToRoomReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryRoomToRoomReq& S2SQueryRoomToRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SQueryRoomToRoomReq.base);
  return *internal_default_instance();
}


void S2SQueryRoomToRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  _internal_metadata_.Clear();
}

bool S2SQueryRoomToRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryRoomToRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryRoomToRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryRoomToRoomReq)
  return false;
#undef DO_
}

void S2SQueryRoomToRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryRoomToRoomReq)
}

::google::protobuf::uint8* S2SQueryRoomToRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryRoomToRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryRoomToRoomReq)
  return target;
}

size_t S2SQueryRoomToRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryRoomToRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryRoomToRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryRoomToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryRoomToRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryRoomToRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryRoomToRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryRoomToRoomReq)
    MergeFrom(*source);
  }
}

void S2SQueryRoomToRoomReq::MergeFrom(const S2SQueryRoomToRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryRoomToRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void S2SQueryRoomToRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryRoomToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRoomToRoomReq::CopyFrom(const S2SQueryRoomToRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryRoomToRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRoomToRoomReq::IsInitialized() const {
  return true;
}

void S2SQueryRoomToRoomReq::Swap(S2SQueryRoomToRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryRoomToRoomReq::InternalSwap(S2SQueryRoomToRoomReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryRoomToRoomReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryRoomToGameAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryRoomToGameAck::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryRoomToGameAck::S2SQueryRoomToGameAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SQueryRoomToGameAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryRoomToGameAck)
}
S2SQueryRoomToGameAck::S2SQueryRoomToGameAck(const S2SQueryRoomToGameAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryRoomToGameAck)
}

void S2SQueryRoomToGameAck::SharedCtor() {
  playerid_ = GOOGLE_ULONGLONG(0);
}

S2SQueryRoomToGameAck::~S2SQueryRoomToGameAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryRoomToGameAck)
  SharedDtor();
}

void S2SQueryRoomToGameAck::SharedDtor() {
}

void S2SQueryRoomToGameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryRoomToGameAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryRoomToGameAck& S2SQueryRoomToGameAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SQueryRoomToGameAck.base);
  return *internal_default_instance();
}


void S2SQueryRoomToGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryRoomToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SQueryRoomToGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryRoomToGameAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryRoomToGameAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryRoomToGameAck)
  return false;
#undef DO_
}

void S2SQueryRoomToGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryRoomToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryRoomToGameAck)
}

::google::protobuf::uint8* S2SQueryRoomToGameAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryRoomToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryRoomToGameAck)
  return target;
}

size_t S2SQueryRoomToGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryRoomToGameAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryRoomToGameAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryRoomToGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryRoomToGameAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryRoomToGameAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryRoomToGameAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryRoomToGameAck)
    MergeFrom(*source);
  }
}

void S2SQueryRoomToGameAck::MergeFrom(const S2SQueryRoomToGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryRoomToGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void S2SQueryRoomToGameAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryRoomToGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRoomToGameAck::CopyFrom(const S2SQueryRoomToGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryRoomToGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRoomToGameAck::IsInitialized() const {
  return true;
}

void S2SQueryRoomToGameAck::Swap(S2SQueryRoomToGameAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryRoomToGameAck::InternalSwap(S2SQueryRoomToGameAck* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryRoomToGameAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SFinishRoomToGameReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SFinishRoomToGameReq::kPlayeridFieldNumber;
const int S2SFinishRoomToGameReq::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SFinishRoomToGameReq::S2SFinishRoomToGameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SFinishRoomToGameReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SFinishRoomToGameReq)
}
S2SFinishRoomToGameReq::S2SFinishRoomToGameReq(const S2SFinishRoomToGameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SFinishRoomToGameReq)
}

void S2SFinishRoomToGameReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
}

S2SFinishRoomToGameReq::~S2SFinishRoomToGameReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SFinishRoomToGameReq)
  SharedDtor();
}

void S2SFinishRoomToGameReq::SharedDtor() {
}

void S2SFinishRoomToGameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SFinishRoomToGameReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SFinishRoomToGameReq& S2SFinishRoomToGameReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SFinishRoomToGameReq.base);
  return *internal_default_instance();
}


void S2SFinishRoomToGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SFinishRoomToGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  _internal_metadata_.Clear();
}

bool S2SFinishRoomToGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SFinishRoomToGameReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SFinishRoomToGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SFinishRoomToGameReq)
  return false;
#undef DO_
}

void S2SFinishRoomToGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SFinishRoomToGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SFinishRoomToGameReq)
}

::google::protobuf::uint8* S2SFinishRoomToGameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SFinishRoomToGameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SFinishRoomToGameReq)
  return target;
}

size_t S2SFinishRoomToGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SFinishRoomToGameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SFinishRoomToGameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SFinishRoomToGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SFinishRoomToGameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SFinishRoomToGameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SFinishRoomToGameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SFinishRoomToGameReq)
    MergeFrom(*source);
  }
}

void S2SFinishRoomToGameReq::MergeFrom(const S2SFinishRoomToGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SFinishRoomToGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void S2SFinishRoomToGameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SFinishRoomToGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SFinishRoomToGameReq::CopyFrom(const S2SFinishRoomToGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SFinishRoomToGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SFinishRoomToGameReq::IsInitialized() const {
  return true;
}

void S2SFinishRoomToGameReq::Swap(S2SFinishRoomToGameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SFinishRoomToGameReq::InternalSwap(S2SFinishRoomToGameReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SFinishRoomToGameReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryMatchToMatchReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryMatchToMatchReq::kPlayeridFieldNumber;
const int S2SQueryMatchToMatchReq::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryMatchToMatchReq::S2SQueryMatchToMatchReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SQueryMatchToMatchReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryMatchToMatchReq)
}
S2SQueryMatchToMatchReq::S2SQueryMatchToMatchReq(const S2SQueryMatchToMatchReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryMatchToMatchReq)
}

void S2SQueryMatchToMatchReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SQueryMatchToMatchReq::~S2SQueryMatchToMatchReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryMatchToMatchReq)
  SharedDtor();
}

void S2SQueryMatchToMatchReq::SharedDtor() {
}

void S2SQueryMatchToMatchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryMatchToMatchReq::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryMatchToMatchReq& S2SQueryMatchToMatchReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SQueryMatchToMatchReq.base);
  return *internal_default_instance();
}


void S2SQueryMatchToMatchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryMatchToMatchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SQueryMatchToMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryMatchToMatchReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryMatchToMatchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryMatchToMatchReq)
  return false;
#undef DO_
}

void S2SQueryMatchToMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryMatchToMatchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryMatchToMatchReq)
}

::google::protobuf::uint8* S2SQueryMatchToMatchReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryMatchToMatchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryMatchToMatchReq)
  return target;
}

size_t S2SQueryMatchToMatchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryMatchToMatchReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryMatchToMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryMatchToMatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryMatchToMatchReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryMatchToMatchReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryMatchToMatchReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryMatchToMatchReq)
    MergeFrom(*source);
  }
}

void S2SQueryMatchToMatchReq::MergeFrom(const S2SQueryMatchToMatchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryMatchToMatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SQueryMatchToMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryMatchToMatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMatchToMatchReq::CopyFrom(const S2SQueryMatchToMatchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryMatchToMatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMatchToMatchReq::IsInitialized() const {
  return true;
}

void S2SQueryMatchToMatchReq::Swap(S2SQueryMatchToMatchReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryMatchToMatchReq::InternalSwap(S2SQueryMatchToMatchReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryMatchToMatchReq::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryMatchToGameAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryMatchToGameAck::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryMatchToGameAck::S2SQueryMatchToGameAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ServerMessage_2eproto::scc_info_S2SQueryMatchToGameAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryMatchToGameAck)
}
S2SQueryMatchToGameAck::S2SQueryMatchToGameAck(const S2SQueryMatchToGameAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryMatchToGameAck)
}

void S2SQueryMatchToGameAck::SharedCtor() {
  playerid_ = GOOGLE_ULONGLONG(0);
}

S2SQueryMatchToGameAck::~S2SQueryMatchToGameAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryMatchToGameAck)
  SharedDtor();
}

void S2SQueryMatchToGameAck::SharedDtor() {
}

void S2SQueryMatchToGameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryMatchToGameAck::descriptor() {
  ::protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryMatchToGameAck& S2SQueryMatchToGameAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ServerMessage_2eproto::scc_info_S2SQueryMatchToGameAck.base);
  return *internal_default_instance();
}


void S2SQueryMatchToGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryMatchToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool S2SQueryMatchToGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryMatchToGameAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryMatchToGameAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryMatchToGameAck)
  return false;
#undef DO_
}

void S2SQueryMatchToGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryMatchToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryMatchToGameAck)
}

::google::protobuf::uint8* S2SQueryMatchToGameAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryMatchToGameAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryMatchToGameAck)
  return target;
}

size_t S2SQueryMatchToGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryMatchToGameAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryMatchToGameAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryMatchToGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryMatchToGameAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryMatchToGameAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryMatchToGameAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryMatchToGameAck)
    MergeFrom(*source);
  }
}

void S2SQueryMatchToGameAck::MergeFrom(const S2SQueryMatchToGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryMatchToGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void S2SQueryMatchToGameAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryMatchToGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMatchToGameAck::CopyFrom(const S2SQueryMatchToGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryMatchToGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMatchToGameAck::IsInitialized() const {
  return true;
}

void S2SQueryMatchToGameAck::Swap(S2SQueryMatchToGameAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryMatchToGameAck::InternalSwap(S2SQueryMatchToGameAck* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryMatchToGameAck::GetMetadata() const {
  protobuf_ServerMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ServerMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SRegisterBattleToRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SRegisterBattleToRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SRegisterBattleToRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SRegisterBattleToBattleAck* Arena::CreateMaybeMessage< ::KFMsg::S2SRegisterBattleToBattleAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SRegisterBattleToBattleAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SOpenRoomToBattleReq* Arena::CreateMaybeMessage< ::KFMsg::S2SOpenRoomToBattleReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SOpenRoomToBattleReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SOpenRoomToRoomAck* Arena::CreateMaybeMessage< ::KFMsg::S2SOpenRoomToRoomAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SOpenRoomToRoomAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SFinishRoomToRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SFinishRoomToRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SFinishRoomToRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SFinishRoomToBattleAck* Arena::CreateMaybeMessage< ::KFMsg::S2SFinishRoomToBattleAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SFinishRoomToBattleAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SHeartBeatToRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SHeartBeatToRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SHeartBeatToRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SStartMatchToShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SStartMatchToShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SStartMatchToShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SStartMatchToGameAck* Arena::CreateMaybeMessage< ::KFMsg::S2SStartMatchToGameAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SStartMatchToGameAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SCancelMatchToShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SCancelMatchToShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SCancelMatchToShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SCreateRoomToRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SCreateRoomToRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SCreateRoomToRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SCreateRoomToMatchAck* Arena::CreateMaybeMessage< ::KFMsg::S2SCreateRoomToMatchAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SCreateRoomToMatchAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SAffirmMatchTimeoutToGame* Arena::CreateMaybeMessage< ::KFMsg::S2SAffirmMatchTimeoutToGame >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SAffirmMatchTimeoutToGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse* Arena::CreateMaybeMessage< ::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SAffirmMatchToShardReq_HeroEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SAffirmMatchToShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SAffirmMatchToShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SAffirmMatchToShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SInformBattleToGameReq* Arena::CreateMaybeMessage< ::KFMsg::S2SInformBattleToGameReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SInformBattleToGameReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SInformBattleToRoomAck* Arena::CreateMaybeMessage< ::KFMsg::S2SInformBattleToRoomAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SInformBattleToRoomAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryRoomToRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryRoomToRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryRoomToRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryRoomToGameAck* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryRoomToGameAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryRoomToGameAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SFinishRoomToGameReq* Arena::CreateMaybeMessage< ::KFMsg::S2SFinishRoomToGameReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SFinishRoomToGameReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryMatchToMatchReq* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryMatchToMatchReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryMatchToMatchReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryMatchToGameAck* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryMatchToGameAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryMatchToGameAck >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
